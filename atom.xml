<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ogalog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ogatomo.com/"/>
  <updated>2018-05-10T01:35:41.000Z</updated>
  <id>http://blog.ogatomo.com/</id>
  
  <author>
    <name>ogatomo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zabbix Server2.2.1をUbuntu13.10にインストールする方法</title>
    <link href="http://blog.ogatomo.com/blog/2014/01/12/how-to-install-zabbix-in-ubuntu-13-04-64bit/"/>
    <id>http://blog.ogatomo.com/blog/2014/01/12/how-to-install-zabbix-in-ubuntu-13-04-64bit/</id>
    <published>2014-01-12T06:48:00.000Z</published>
    <updated>2018-05-10T01:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Ubuntu13.10</code>に<code>zabbix2.2.1</code>をインストールした時のメモ。</p><p>メモった事</p><ul><li>ソースコードからzabbix-serverインストール</li><li>フロントエンド用のGUI設定</li><li>文字化け対策など</li></ul><a id="more"></a><h3 id="zabbix-serverのインストール"><a href="#zabbix-serverのインストール" class="headerlink" title="zabbix-serverのインストール"></a>zabbix-serverのインストール</h3><p><code>zabbix-server</code>は<code>apt-get</code>コマンドでインストール出来なかったのでソースからインストールします。</p><p>zabbix用のユーザーを追加します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># groupadd zabbix</span><br><span class="line"># useradd -g zabbix zabbix</span><br></pre></td></tr></table></figure><p><a href="http://www.zabbix.com/download.php" target="_blank" rel="noopener">http://www.zabbix.com/download.php</a>からソースコードをダウンロードします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/src</span><br><span class="line"># wget http://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/2.2.1/zabbix-2.2.1.tar.gz/download -O zabbix-2.2.1.tar.gz</span><br><span class="line"># tar xvzf zabbix-2.2.1.tar.gz</span><br><span class="line"># cd zabbix-2.2.1/</span><br></pre></td></tr></table></figure><p><code>cofigure</code>した後、<code>make install</code>します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install libsnmp-dev</span><br><span class="line"># ./configure --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2</span><br><span class="line"># make install</span><br></pre></td></tr></table></figure><p>これでインストールは完了です。</p><h3 id="zabbix-serverの初期設定"><a href="#zabbix-serverの初期設定" class="headerlink" title="zabbix-serverの初期設定"></a>zabbix-serverの初期設定</h3><p>MySQL Server(10.0.0.100)にzabbix用(10.0.0.4)のデータベースを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database zabbix_db default character set=utf8;</span><br><span class="line">mysql&gt; grant all privileges on zabbix_db.* to zabbix@10.0.0.4 identified by &apos;zabbix&apos; with grant option;</span><br></pre></td></tr></table></figure><p><code>/usr/local/src/zabbix-2.2.1/database/mysql</code>のzabbixのデータベース作成用のSQLファイルを実行します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u zabbix -pzabbix -h 10.0.0.100 zabbix_db &lt; /usr/local/src/zabbix-2.2.1/database/mysql/schema.sql</span><br><span class="line"># mysql -u zabbix -pzabbix -h 10.0.0.100 zabbix_db &lt; /usr/local/src/zabbix-2.2.1/database/mysql/images.sql</span><br><span class="line"># mysql -u zabbix -pzabbix -h 10.0.0.100 zabbix_db &lt; /usr/local/src/zabbix-2.2.1/database/mysql/data.sql</span><br></pre></td></tr></table></figure><p><code>/usr/local/etc/zabbix_server.conf</code>のDB接続設定を変更します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DBName=zabbix_db</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix</span><br><span class="line">DBHost=10.0.0.100</span><br></pre></td></tr></table></figure><p>ソースファイルからDebian用の起動スクリプトをコピーします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cp /usr/local/src/zabbix-2.2.1/misc/init.d/debian/zabbix-server /etc/init.d/zabbix-server</span><br><span class="line"># cp /usr/local/src/zabbix-2.2.1/misc/init.d/debian/zabbix-agent /etc/init.d/zabbix-agent</span><br><span class="line"># chmod +x /etc/init.d/zabbix-server</span><br><span class="line"># chmod +x /etc/init.d/zabbix-agent</span><br></pre></td></tr></table></figure><p>OS起動時にzabbix-serverが自動起動するように設定します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install sysv-rc-conf</span><br><span class="line"># sysv-rc-conf zabbix-server on</span><br></pre></td></tr></table></figure><h3 id="GUIの初期設定"><a href="#GUIの初期設定" class="headerlink" title="GUIの初期設定"></a>GUIの初期設定</h3><p>GUIの動作に必要なパッケージをインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install apache2 libapache2-mod-php5 php5 php5-mysql php5-gd ttf-japanese-gothic</span><br></pre></td></tr></table></figure><p><code>/etc/php5/apache2/php.ini</code>を変更します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_max_size = 16M</span><br><span class="line">max_execution_time = 300</span><br><span class="line">max_input_time = 300</span><br><span class="line">date.timezone = Asia/Tokyo</span><br></pre></td></tr></table></figure><p>zabbixのソースファイルからGUI用のソースをコピーします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp -r /usr/local/src/zabbix-2.2.1/frontends /usr/local/share/zabbix/frontend</span><br><span class="line"># chown -R www-data:www-data /usr/local/share/zabbix/frontend</span><br></pre></td></tr></table></figure><p>GUI用の設定ファイルを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cp /usr/local/share/zabbix/frontend/php/conf/zabbix.conf.php.example /usr/local/share/zabbix/frontend/php/conf/zabbix.conf.php</span><br></pre></td></tr></table></figure><p>以下の様に環境に合わせて変更します。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Zabbix GUI configuration file</span></span><br><span class="line"><span class="keyword">global</span> $DB;</span><br><span class="line"></span><br><span class="line">$DB[<span class="string">"TYPE"</span>]                             = <span class="string">'MYSQL'</span>;</span><br><span class="line">$DB[<span class="string">"SERVER"</span>]                   = <span class="string">'10.0.0.100'</span>;</span><br><span class="line">$DB[<span class="string">"PORT"</span>]                             = <span class="string">'3306'</span>;</span><br><span class="line">$DB[<span class="string">"DATABASE"</span>]                 = <span class="string">'zabbix_db'</span>;</span><br><span class="line">$DB[<span class="string">"USER"</span>]                             = <span class="string">'zabbix'</span>;</span><br><span class="line">$DB[<span class="string">"PASSWORD"</span>]                 = <span class="string">'zabbix'</span>;</span><br><span class="line"><span class="comment">// SCHEMA is relevant only for IBM_DB2 database</span></span><br><span class="line">$DB[<span class="string">"SCHEMA"</span>]                   = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">$ZBX_SERVER                             = <span class="string">'localhost'</span>;</span><br><span class="line">$ZBX_SERVER_PORT                = <span class="string">'10051'</span>;</span><br><span class="line">$ZBX_SERVER_NAME                = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">$IMAGE_FORMAT_DEFAULT   = IMAGE_FORMAT_PNG;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>/etc/apache2/sites-available/zabbix.conf</code>にzabbix用のファイルを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerAdmin webmaster@localhost</span><br><span class="line"></span><br><span class="line">DocumentRoot /var/www</span><br><span class="line"></span><br><span class="line">&lt;Directory /usr/local/share/zabbix/frontend/php&gt;</span><br><span class="line">AllowOverride All</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line"></span><br><span class="line">CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line"></span><br><span class="line">Alias /zabbix /usr/local/share/zabbix/frontend/php</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>apache用の設定ファイルを作成後、設定ファイルを有効にします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># a2ensite zabbix</span><br></pre></td></tr></table></figure><h3 id="グラフの文字化け対策"><a href="#グラフの文字化け対策" class="headerlink" title="グラフの文字化け対策"></a>グラフの文字化け対策</h3><p>GUIのプロファイルで日本語が選択出来るように、日本語のlocaleを作成しておきます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># locale-gen ja_JP.UTF-8</span><br><span class="line"># dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>GUIでグラフが文字化けしないように、フォントのSymbolicLinkを張ります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install fonts-ipafont-gothic fonts-ipafont-nonfree-uigothic</span><br><span class="line"># ln -s /usr/share/fonts/opentype/ipafont-gothic/ipag.ttf /usr/local/share/zabbix/frontend/php/fonts/ipag.ttf</span><br><span class="line"># ln -s /usr/share/fonts/truetype/ipafont-nonfree-uigothic/ipagui.ttf /usr/local/share/zabbix/frontend/php/fonts/ipagui.ttf</span><br></pre></td></tr></table></figure><p><code>/usr/local/share/zabbix/frontend/php/include/defines.inc.php</code>のZBX_GRAPH_FONT_NAMEを変更します。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// (省略)</span></span><br><span class="line">define(<span class="string">'ZBX_GRAPH_FONT_NAME'</span>,           <span class="string">'ipagui'</span>); <span class="comment">// font file name</span></span><br></pre></td></tr></table></figure><p>apacheを再起動します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># service apache2 restart</span><br></pre></td></tr></table></figure><p>ブラウザで<code>http://zabbixサーバーのIP/zabbix</code>にアクセスすると、GUIが表示されます。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Ubuntu13.10&lt;/code&gt;に&lt;code&gt;zabbix2.2.1&lt;/code&gt;をインストールした時のメモ。&lt;/p&gt;
&lt;p&gt;メモった事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ソースコードからzabbix-serverインストール&lt;/li&gt;
&lt;li&gt;フロントエンド用のGUI設定&lt;/li&gt;
&lt;li&gt;文字化け対策など&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="zabbix" scheme="http://blog.ogatomo.com/categories/zabbix/"/>
    
    
  </entry>
  
  <entry>
    <title>Emacsのパッケージ管理をel-getに移行しました</title>
    <link href="http://blog.ogatomo.com/blog/2014/01/08/migration-to-el-get/"/>
    <id>http://blog.ogatomo.com/blog/2014/01/08/migration-to-el-get/</id>
    <published>2014-01-08T11:18:00.000Z</published>
    <updated>2018-05-10T01:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://great-h.github.io/events/event-034.html" target="_blank" rel="noopener">すごい広島#34</a>にエア参加しました。<br>Emacsのパッケージをgitsubmoduleで管理していたのですが、<br>あんまりパッケージ管理出来てない事に気づいたので<br>el-getに移行しました。  </p><h3 id="やってみたこと"><a href="#やってみたこと" class="headerlink" title="やってみたこと"></a>やってみたこと</h3><ul><li>el-getのインストール</li><li>野良パッケージをel-getに登録</li><li>パッケージ毎の初期化用elisp作成</li><li>el-get用にgitignore作成</li></ul><a id="more"></a><h3 id="el-getのインストール"><a href="#el-getのインストール" class="headerlink" title="el-getのインストール"></a>el-getのインストール</h3><p>el-getのインストールは、公式の方法だと</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(add-to-list &apos;load-path &quot;~/.emacs.d/el-get/el-get&quot;)</span><br><span class="line"></span><br><span class="line">(unless (require &apos;el-get nil &apos;noerror)</span><br><span class="line">  (with-current-buffer</span><br><span class="line">      (url-retrieve-synchronously</span><br><span class="line">       &quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&quot;)</span><br><span class="line">    (let (el-get-master-branch)</span><br><span class="line">      (goto-char (point-max))</span><br><span class="line">      (eval-print-last-sexp))))</span><br><span class="line"></span><br><span class="line">(el-get &apos;sync)</span><br></pre></td></tr></table></figure><p>というelispをinit.elに書けば良いらしいです。  </p><p>自分の環境だとうまくいかなかったので、<br>el-getとhelmだけgitsubmoduleで管理することにしました。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.emacs.d</span><br><span class="line">$ git submodule add https://github.com/dimitri/el-get.git</span><br><span class="line">$ git submodule add https://github.com/emacs-helm/helm.git</span><br></pre></td></tr></table></figure><p>これでひとまずインストールは完了です。<br>自分の環境だと、el-getの初期化処理は以下の様になりました。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(add-to-list &apos;load-path &quot;~/.emacs.d/el-get&quot;)</span><br><span class="line"></span><br><span class="line">(setq el-get-dir &quot;~/.emacs.d/el-get-packages&quot;)</span><br><span class="line">(setq el-get-recipe-path (list &quot;~/.emacs.d/el-get-user-recipes&quot;</span><br><span class="line">                               &quot;~/.emacs.d/el-get/recipes/emacswiki&quot;</span><br><span class="line">                               &quot;~/.emacs.d/el-get/recipes&quot;))</span><br><span class="line">(setq el-get-user-package-directory &quot;~/.emacs.d/el-get-init-files&quot;)</span><br><span class="line"></span><br><span class="line">(require &apos;el-get)</span><br><span class="line"></span><br><span class="line">(el-get &apos;sync)</span><br></pre></td></tr></table></figure><p>setqしている変数ですが、用途は以下の通りです。  </p><table><thead><tr><th style="text-align:left">変数名</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">el-get-dir</td><td style="text-align:left">el-getでパッケージをインストールする際のインストール先</td></tr><tr><td style="text-align:left">el-get-recipe-path</td><td style="text-align:left">el-get用のパッケージ定義ファイル置き場</td></tr><tr><td style="text-align:left">el-get-user-package-directory</td><td style="text-align:left">パッケージがrequireされた時に実行される初期化用elisp置き場</td></tr></tbody></table><p>あとは、<code>M-x el-get-install</code>でひたすらパッケージをインストールします。</p><h3 id="野良パッケージをel-getに登録"><a href="#野良パッケージをel-getに登録" class="headerlink" title="野良パッケージをel-getに登録"></a>野良パッケージをel-getに登録</h3><p><code>M-x el-get-install</code>でパッケージをインストールしていくと、<br>リポジトリに登録されていない野良パッケージの存在に気付かされます。  </p><p>el-getに野良パッケージを登録するには、<br><code>el-get-recipe-path</code><br>に設定したディレクトリ配下にレシピファイルを作成します。  </p><p>作成例ですが、yard-mode.el用のレシピファイルと、</p><figure class="highlight plain"><figcaption><span>yard-mode.rcp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(:name yard-mode</span><br><span class="line">       :type git</span><br><span class="line">       :website &quot;https://github.com/pd/yard-mode.el&quot;</span><br><span class="line">       :description &quot;Rudimentary support for fontifying YARD tags and directives in ruby comments.&quot;</span><br><span class="line">       :url &quot;https://github.com/pd/yard-mode.el.git&quot;)</span><br></pre></td></tr></table></figure><p>auto-save-buffers用のレシピファイルです。</p><figure class="highlight plain"><figcaption><span>auto-save-buffers.rcp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(:name auto-save-buffers</span><br><span class="line">       :type http</span><br><span class="line">       :description &quot;auto-save-buffers&quot;</span><br><span class="line">       :url &quot;http://homepage3.nifty.com/oatu/emacs/archives/auto-save-buffers.el&quot;)</span><br></pre></td></tr></table></figure><p><code>:type</code>で、gitからcloneするか、httpでファイルをそのまま取ってくるかなどの取得方法を指定出来るようです。<br><code>:url</code>はリポジトリやファイルのURLを指定します。  </p><p>上記ファイルを作成すれば、<code>M-x el-get-install</code>でインストール出来るパッケージの候補として選べるようになります。</p><h3 id="パッケージ毎の初期化用elisp作成"><a href="#パッケージ毎の初期化用elisp作成" class="headerlink" title="パッケージ毎の初期化用elisp作成"></a>パッケージ毎の初期化用elisp作成</h3><p>これまで私はinit.elにパッケージ毎の初期化処理を書いていたのですが、<br>el-getでは、<code>el-get-user-package-directory</code>内に<br><code>init-パッケージ名.el</code>という初期化用elispを用意しておくことで<br>パッケージがrequireされたタイミングで上記のelispを実行してくれるようです。</p><p>最終的に、~/.emacs.dのディレクトリ構成は以下の様になりました。</p><figure class="highlight sh"><figcaption><span>~/.emacs.d</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">~/.emacs.d</span><br><span class="line">├── el-get</span><br><span class="line">├── el-get-packages</span><br><span class="line">│   └── （省略）</span><br><span class="line">├── el-get-init-files</span><br><span class="line">│   ├── init-auto-save-buffers.el</span><br><span class="line">│   ├── init-jaspace.el</span><br><span class="line">│   ├── init-magit.el</span><br><span class="line">│   ├── init-php-mode.el</span><br><span class="line">│   ├── init-popwin.el</span><br><span class="line">│   ├── init-rcodetools.el</span><br><span class="line">│   ├── init-ruby-mode-github.el</span><br><span class="line">│   └── init-undo-tree.el</span><br><span class="line">├── el-get-user-recipes</span><br><span class="line">│   ├── auto-save-buffers.rcp</span><br><span class="line">│   ├── cucumber.rcp</span><br><span class="line">│   ├── findr.rcp</span><br><span class="line">│   ├── ruby-mode-github.rcp</span><br><span class="line">│   └── yard-mode.rcp</span><br><span class="line">└── init.el</span><br></pre></td></tr></table></figure><p>init.elが肥大化していたので、require時に実行したい処理は<br><code>init-パッケージ名.el</code>に書くようにすれば、<br>だいぶスッキリするのではないかと思ってます。（まだやってない）</p><h3 id="el-get用にgitignore作成"><a href="#el-get用にgitignore作成" class="headerlink" title="el-get用にgitignore作成"></a>el-get用にgitignore作成</h3><p>el-getを導入後は、elファイルをコンパイルしたelcファイルや、<br><code>M-x el-get-install</code>でインストールしたファイルが<br><code>git status</code>実行時に<code>Untracked files:</code>として表示されるようになりました。  </p><p>これらを非表示とするため、以下の.gitignoreファイルを作成しました。<br><figure class="highlight sh"><figcaption><span>.gitignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*.elc</span><br><span class="line">.loaddefs.el</span><br><span class="line">el-get-packages/</span><br><span class="line">!.status.el</span><br></pre></td></tr></table></figure></p><p>.status.elは、<code>M-x el-get-install</code>を実行すると<code>el-get-packages/</code>内に作成されます。<br>どのパッケージをインストールしたのか、このファイル内に持ってるらしいので<br>gitで管理する場合は、このファイルもリポジトリに入れた方が良い様です。</p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>el-getに移行したことで、Emacs起動時に全てのパッケージが勝手にインストールされるようになりました。<br>これで、各PC毎に<code>git submodules update</code>したりせずに済みます。  </p><p>野良パッケージもちゃんとレシピファイル準備すれば<br>el-getの恩恵にあずかることができます。</p><p>autoloadとかの仕組みをちゃんと理解出来てないので、<br><code>init-パッケージ名.el</code>書きながら慣れていきたいところです。</p><p>作成した<code>~/.emacs.d</code>配下のファイル類はgithubで公開してます。<br><a href="https://github.com/ogatomo/emacs/tree/el-get" target="_blank" rel="noopener">https://github.com/ogatomo/emacs/tree/el-get</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://great-h.github.io/events/event-034.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;すごい広島#34&lt;/a&gt;にエア参加しました。&lt;br&gt;Emacsのパッケージをgitsubmoduleで管理していたのですが、&lt;br&gt;あんまりパッケージ管理出来てない事に気づいたので&lt;br&gt;el-getに移行しました。  &lt;/p&gt;
&lt;h3 id=&quot;やってみたこと&quot;&gt;&lt;a href=&quot;#やってみたこと&quot; class=&quot;headerlink&quot; title=&quot;やってみたこと&quot;&gt;&lt;/a&gt;やってみたこと&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;el-getのインストール&lt;/li&gt;
&lt;li&gt;野良パッケージをel-getに登録&lt;/li&gt;
&lt;li&gt;パッケージ毎の初期化用elisp作成&lt;/li&gt;
&lt;li&gt;el-get用にgitignore作成&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://blog.ogatomo.com/categories/emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>広島Ruby勉強会#35 - Chefについて話しました</title>
    <link href="http://blog.ogatomo.com/blog/2013/11/02/hiroshima-rb-35-chef/"/>
    <id>http://blog.ogatomo.com/blog/2013/11/02/hiroshima-rb-35-chef/</id>
    <published>2013-11-02T14:10:00.000Z</published>
    <updated>2018-05-10T01:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://hiroshimarb.github.io/blog/2013/11/02/hiroshimarb-35/" target="_blank" rel="noopener">広島Ruby勉強会#035</a>に参加しました。<br>半年くらいChefを使い込んで、大分慣れてきたので<br>今回はChefについて話してきました。  </p><p><iframe src="http://www.slideshare.net/slideshow/embed_code/27831302" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/tomokazuogawa37/chef09" title="広島Ruby勉強会#35 - Chef入門" target="_blank">広島Ruby勉強会#35 - Chef入門</a> </strong> from <strong><a href="http://www.slideshare.net/tomokazuogawa37" target="_blank">Tomokazu Ogawa</a></strong> </div></p><p>スライドの内容は、  </p><ul><li>chef-server,knife,chef-clientのインストールとか設定</li><li>Cookbookの中身についての説明</li><li>便利Cookbookの紹介</li><li>nodeって何なのかなど</li><li>Tips</li></ul><p>みたいな構成になってます。  </p><a id="more"></a><h3 id="chef-server-knife-chef-clientのインストールとか設定"><a href="#chef-server-knife-chef-clientのインストールとか設定" class="headerlink" title="chef-server,knife,chef-clientのインストールとか設定"></a>chef-server,knife,chef-clientのインストールとか設定</h3><p>Chefはchef-serverの構築が割と面倒だったり、<br>はまりどころが多かったりという理由で<br>敬遠されがちだったりします。  </p><p>Chefの10.x系までは結構大変でしたが、<br>11.x系からは割と簡単になった気がしてます。  </p><p>chef-soloも便利なのですが、<br>chef-serverじゃないと出来ない事も色々とあったりするので、<br>自分としては運用はchef-server有りの構成が良いと思います。  </p><p>vagrant等でchef-solo動かして開発環境をサクッと作ったり、<br>Cookbookのテストを書いてみたりなど、今後やっていきたい所。</p><h3 id="Cookbookの中身についての説明"><a href="#Cookbookの中身についての説明" class="headerlink" title="Cookbookの中身についての説明"></a>Cookbookの中身についての説明</h3><p>Cookbookは正直、ソースをどこから読んで良いのか分からない感じでした。  </p><p>初めはrecipesの中から読んでいくのが良いかなと思ったのですが、<br>Cookbookによってはprovidersしか使ってなかったり、<br>providersの処理がlibの中に入ってたり、<br>書き方が色々とあるみたいで悩んだ所です。</p><p>「metadata.rbて何？」みたいな質問もありました。<br>スライドからは抜け落ちてる感じだったので<br>ざっくり説明すると、</p><ul><li>Cookbookの名称 … ここで設定した名称でchef-serverに登録される</li><li>Cookbookのversion … chef-serverはversionごとにCookbookを管理</li><li>Cookbookの依存関係 … chef-clientは実行時に勝手に依存関係のCookbookを取得してくれる</li><li>recipeの概要を書いたりなど … 10.x系だとmetadata.rb内のrecipe名が間違っててもエラーにはならないらしい</li></ul><p>という感じです。<br>ただ、11.xから色々と記述が加わってるぽいですが、<br>調べきれていないです。  </p><h3 id="便利Cookbookの紹介"><a href="#便利Cookbookの紹介" class="headerlink" title="便利Cookbookの紹介"></a>便利Cookbookの紹介</h3><p>apache2やmysqlなどのCookbookを紹介しました。<br>htpasswdは便利ですが、<br>sudoは諸刃の剣なので気をつけましょうという。  </p><p>Chef10.x系を使ってる間に、<br>その頃使ってたCookbookもChef11.x系対応になってたりしてるので、<br>Cookbook管理用のリポジトリは別途、自分の環境用に用意したほうが良いです。  </p><p>Cookbookをコピーしてきても、自分の環境でそのまま動かない事があり、<br>例えば、AWS製のLinux(Amazon Linux)の場合は<br>Cookbookに処理自体が書かれてない場合があり、<br>そういうCookbookは自分用に修正して、別のリポジトリに登録しておくほうが無難です。<br>（よくあるのは、recipe内に:centosや:redhatというシンボルが登場するけど:amazonだけが無いとか）  </p><p>あと、よく知られたミドルウェアのCookbookほど、<br>ぐぐったら沢山出てきてどれ選んで良いのか分からない事があるのですが、<br>迷ったときはOpscode社のgithubに上がってるCookbookを使うといいと思います。</p><h3 id="nodeって何なのか-など"><a href="#nodeって何なのか-など" class="headerlink" title="nodeって何なのか など"></a>nodeって何なのか など</h3><p>nodeについて理解するまでCookbookのパラメータはattributesに全部書いてました。<br>attributesにはデフォルト値だけ書けばよいらしいです。<br>nodeとattributes両方に別々に値が設定された場合、どちらが優先されるかなど<br>気にしないといけない事が結構あるようです。<br>（nodeのほうが優先される）</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>roleの説明をざっくりと行いました。  </p><p>時間があれば、environmentやdatabugなども説明したかったのですが、<br>スライド作る時間が無くなってしまったのでTipsとしては微妙な感じになってしまいました。  </p><h3 id="今後やっていきたい事"><a href="#今後やっていきたい事" class="headerlink" title="今後やっていきたい事"></a>今後やっていきたい事</h3><ul><li>自作Cookbookのテスト書いてないので書く</li><li>chef-clientをエージェントで動かす</li><li>Chefを10.x系から11.x系にバージョン上げる</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://hiroshimarb.github.io/blog/2013/11/02/hiroshimarb-35/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;広島Ruby勉強会#035&lt;/a&gt;に参加しました。&lt;br&gt;半年くらいChefを使い込んで、大分慣れてきたので&lt;br&gt;今回はChefについて話してきました。  &lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/27831302&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/tomokazuogawa37/chef09&quot; title=&quot;広島Ruby勉強会#35 - Chef入門&quot; target=&quot;_blank&quot;&gt;広島Ruby勉強会#35 - Chef入門&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/tomokazuogawa37&quot; target=&quot;_blank&quot;&gt;Tomokazu Ogawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;スライドの内容は、  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chef-server,knife,chef-clientのインストールとか設定&lt;/li&gt;
&lt;li&gt;Cookbookの中身についての説明&lt;/li&gt;
&lt;li&gt;便利Cookbookの紹介&lt;/li&gt;
&lt;li&gt;nodeって何なのかなど&lt;/li&gt;
&lt;li&gt;Tips&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;みたいな構成になってます。  &lt;/p&gt;
    
    </summary>
    
      <category term="hiroshima.rb" scheme="http://blog.ogatomo.com/categories/hiroshima-rb/"/>
    
    
  </entry>
  
  <entry>
    <title>Redmineプラグインの開発環境を作成</title>
    <link href="http://blog.ogatomo.com/blog/2013/07/24/development-environment-of-redmine-plugin/"/>
    <id>http://blog.ogatomo.com/blog/2013/07/24/development-environment-of-redmine-plugin/</id>
    <published>2013-07-24T13:51:00.000Z</published>
    <updated>2018-05-10T01:35:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://great-h.github.io/events/event-010.html" target="_blank" rel="noopener">すごい広島#10</a>に参加しました。<br>・・・が、今回はエア参加です。<br>最近、Redmineのプラグインなどを自作してみたくなり、<br>プラグインの開発環境の構築などをやってみました。</p><h3 id="開発環境構築までにやったこと"><a href="#開発環境構築までにやったこと" class="headerlink" title="開発環境構築までにやったこと"></a>開発環境構築までにやったこと</h3><ul><li>Redmineのソースのダウンロード</li><li>Redmineのセットアップ</li><li>pluginの雛形作成</li><li>pluginの動作確認</li></ul><a id="more"></a><h3 id="Redmineのソースのダウンロード"><a href="#Redmineのソースのダウンロード" class="headerlink" title="Redmineのソースのダウンロード"></a>Redmineのソースのダウンロード</h3><p>いつの間にかgithub上にもプロジェクトが作られていました。<br>せっかくなので、githubからcloneしてきます。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span>  https://github.com/redmine/redmine.git</span><br></pre></td></tr></table></figure><h3 id="Redmineのセットアップ"><a href="#Redmineのセットアップ" class="headerlink" title="Redmineのセットアップ"></a>Redmineのセットアップ</h3><p>Redmineのソースコードがclone出来たら、<br>必要なgemのインストールやDBの設定などを行なっていきます。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> redmine</span><br><span class="line">$ bundle install</span><br></pre></td></tr></table></figure><p>rmagicのインストールに失敗する場合は、<br>ImageMagickを入れて再度bundle installしましょう。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install ImageMagick</span><br><span class="line">$ bundle install</span><br></pre></td></tr></table></figure><p>次に、DBの設定を行います。<br>pluginが動けばいいので、お手軽なsqliteで設定を行います。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp config/database.yml.example config/database.yml</span><br><span class="line">$ vi config/database.yml</span><br></pre></td></tr></table></figure><p>設定ファイルは以下の様に書き換えました。</p><figure class="highlight yaml"><figcaption><span>config/database.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">production:</span></span><br><span class="line"><span class="attr">  adapter:</span> <span class="string">sqlite3</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">db/redmine_prod.sqlite3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line"><span class="attr">  adapter:</span> <span class="string">sqlite3</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">db/redmine_dev.sqlite3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  adapter:</span> <span class="string">sqlite3</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">db/redmine_test.sqlite3</span></span><br></pre></td></tr></table></figure><p>DBを作ります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rake db:migrate</span><br></pre></td></tr></table></figure><p>セッション用にトークンを作ります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rake generate_secret_token</span><br></pre></td></tr></table></figure><p>redmineを起動してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rails s</span><br></pre></td></tr></table></figure><p><a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>にブラウザでアクセスすれば、<br>Redmineのホームが起動するはずです。</p><p>以上でRedmineのセットアップは完了です。</p><h3 id="pluginの雛形作成"><a href="#pluginの雛形作成" class="headerlink" title="pluginの雛形作成"></a>pluginの雛形作成</h3><p>pluginの雛形作成は、<a href="http://www.gogolek.co.uk/blog/2012/09/writing-redmine-2-x-plugins-tutorial/" target="_blank" rel="noopener">ここ</a>を参考にしました。  </p><p>まずは、環境変数を設定します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> RAILS_ENV=<span class="string">"production"</span></span><br></pre></td></tr></table></figure><p>exampleというpluginを試しに作ってみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rails generate redmine_plugin example</span><br></pre></td></tr></table></figure><p>以下の様に、pluginのファイルが作成されました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">create  plugins/example/app</span><br><span class="line">create  plugins/example/app/controllers</span><br><span class="line">create  plugins/example/app/helpers</span><br><span class="line">create  plugins/example/app/models</span><br><span class="line">create  plugins/example/app/views</span><br><span class="line">create  plugins/example/db/migrate</span><br><span class="line">create  plugins/example/lib/tasks</span><br><span class="line">create  plugins/example/assets/images</span><br><span class="line">create  plugins/example/assets/javascripts</span><br><span class="line">create  plugins/example/assets/stylesheets</span><br><span class="line">create  plugins/example/config/locales</span><br><span class="line">create  plugins/example/test</span><br><span class="line">create  plugins/example/test/fixtures</span><br><span class="line">create  plugins/example/test/unit</span><br><span class="line">create  plugins/example/test/functional</span><br><span class="line">create  plugins/example/test/integration</span><br><span class="line">create  plugins/example/README.rdoc</span><br><span class="line">create  plugins/example/init.rb</span><br><span class="line">create  plugins/example/config/routes.rb</span><br><span class="line">create  plugins/example/config/locales/en.yml</span><br><span class="line">create  plugins/example/test/test_helper.rb</span><br></pre></td></tr></table></figure><p>pluginの説明などは<code>plugins/example/init.rb</code>に書けば良いようです。<br>作成した直後は以下の内容になってました。  </p><figure class="highlight ruby"><figcaption><span>plugins/example/init.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Redmine::Plugin.register <span class="symbol">:example</span> <span class="keyword">do</span></span><br><span class="line">  name <span class="string">'Example plugin'</span></span><br><span class="line">  author <span class="string">'Author name'</span></span><br><span class="line">  description <span class="string">'This is a plugin for Redmine'</span></span><br><span class="line">  version <span class="string">'0.0.1'</span></span><br><span class="line">  url <span class="string">'http://example.com/path/to/plugin'</span></span><br><span class="line">  author_url <span class="string">'http://example.com/about'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="pluginの動作確認"><a href="#pluginの動作確認" class="headerlink" title="pluginの動作確認"></a>pluginの動作確認</h3><p>環境変数がproductionに変わっているはずなので、<br>DBを作り直します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rake db:migrate</span><br></pre></td></tr></table></figure><p>redmineを停止し、もう一度起動しなおします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rails s</span><br></pre></td></tr></table></figure><p><a href="http://localhost:3000/login" target="_blank" rel="noopener">http://localhost:3000/login</a>からログインし、<br><a href="http://localhost:3000/admin/plugins" target="_blank" rel="noopener">http://localhost:3000/admin/plugins</a>を確認するとプラグインが表示されるはずです。<br>（変更してなければ、IDとパスワードは両方とも<code>admin</code>です）</p><img src="/blog/images/2013-07-24-redmine-plugin.png"><p>とりあえず、次はどうしたらいいのかわからないので、今日はここまで。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://great-h.github.io/events/event-010.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;すごい広島#10&lt;/a&gt;に参加しました。&lt;br&gt;・・・が、今回はエア参加です。&lt;br&gt;最近、Redmineのプラグインなどを自作してみたくなり、&lt;br&gt;プラグインの開発環境の構築などをやってみました。&lt;/p&gt;
&lt;h3 id=&quot;開発環境構築までにやったこと&quot;&gt;&lt;a href=&quot;#開発環境構築までにやったこと&quot; class=&quot;headerlink&quot; title=&quot;開発環境構築までにやったこと&quot;&gt;&lt;/a&gt;開発環境構築までにやったこと&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Redmineのソースのダウンロード&lt;/li&gt;
&lt;li&gt;Redmineのセットアップ&lt;/li&gt;
&lt;li&gt;pluginの雛形作成&lt;/li&gt;
&lt;li&gt;pluginの動作確認&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="redmine" scheme="http://blog.ogatomo.com/categories/redmine/"/>
    
    
  </entry>
  
  <entry>
    <title>rubymotionでjoyboxを使ってみた</title>
    <link href="http://blog.ogatomo.com/blog/2013/07/18/using-joybox-in-rubymotion/"/>
    <id>http://blog.ogatomo.com/blog/2013/07/18/using-joybox-in-rubymotion/</id>
    <published>2013-07-18T12:39:00.000Z</published>
    <updated>2018-05-10T01:35:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://great-h.github.io/events/event-009.html" target="_blank" rel="noopener">すごい広島#9</a>に参加してきました。<br>最近、<a href="http://www.rubymotion.com/" target="_blank" rel="noopener">RubyMotion</a>で遊べてなかったので、<br>この機会にRubyMotionで<a href="http://www.cocos2d-iphone.org/" target="_blank" rel="noopener">cocos2d</a>やってみようと思い立ちました。  </p><p>RubyMotionから<a href="http://cocoapods.org/" target="_blank" rel="noopener">Cocoapods</a>を使ってcocos2dをインストールすると、<br>毎回、cocos2dのソースのダウンロードで待たされてしまう様なので<br>rubymotion + joyboxを使うとその辺が楽になるのか試してみました。</p><h3 id="今回やったこと"><a href="#今回やったこと" class="headerlink" title="今回やったこと"></a>今回やったこと</h3><ul><li>joyboxのインストール</li><li>プロジェクトの雛形の生成</li><li>joyboxで簡単な処理を書いてみる</li></ul><a id="more"></a><h3 id="joyboxのインストール"><a href="#joyboxのインストール" class="headerlink" title="joyboxのインストール"></a>joyboxのインストール</h3><p>joyboxはgemコマンドでインストールし、<br>その後、joyboxコマンドでセットアップします。<br>セットアップ後、rubymotionでjoybox用のプロジェクトテンプレートが使えるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gem install joybox</span><br><span class="line">$ joybox install</span><br><span class="line">Joybox RubyMotion Templates and Commands installed correctly</span><br></pre></td></tr></table></figure><p>joyboxのインストール場所を覗いてみると、<br><code>gems/joybox-1.0.0/vendor/vendor-ios/cocos_2d/cocos_2d_include</code><br>あたりにcocos2dのヘッダファイルが入っているようです。<br>cocos2dの2.1.0が入っているっぽいです。  </p><p>コンパイル済みの静的ライブラリファイルは、<br><code>gems/joybox-1.0.0/vendor/vendor-ios/cocos_2d/libcocos2d.a</code><br>に置いてありました。<br>これで、ソースファイルのダウンロードやコンパイルで待たされずに済みそうです。  </p><h3 id="プロジェクトの雛形の生成"><a href="#プロジェクトの雛形の生成" class="headerlink" title="プロジェクトの雛形の生成"></a>プロジェクトの雛形の生成</h3><p>rubymotionのプロジェクトを作成します。<br>–templateオプションに、joybox用のテンプレートを指定することで、<br>joyboxを動かすのに必要なソースコードが自動生成されます  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ motion create --template=joybox-ios joybox_test</span><br><span class="line">    Create joybox_test</span><br><span class="line">    Create joybox_test/app/app_delegate.rb</span><br><span class="line">    Create joybox_test/Rakefile</span><br><span class="line">    Create joybox_test/resources/Default-568h@2x.png</span><br><span class="line">    Create joybox_test/resources/fps_images-hd.png</span><br><span class="line">    Create joybox_test/resources/fps_images-ipadhd.png</span><br><span class="line">    Create joybox_test/resources/fps_images.png</span><br><span class="line">    Create joybox_test/spec/main_spec.rb</span><br></pre></td></tr></table></figure><p>生成されたコードを見てみると、<br>cocos2dの初期化コードをJoyboxが隠蔽してくれているようで、<br>だいぶスッキリした感じです。  </p><figure class="highlight ruby"><figcaption><span>app/app_delegate.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(application, <span class="symbol">didFinishLaunchingWithOptions:</span>launchOptions)</span></span></span><br><span class="line"></span><br><span class="line">    @director = Joybox::Configuration.setup <span class="keyword">do</span></span><br><span class="line">      director <span class="symbol">display_stats:</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    @navigation_controller = UINavigationController.alloc.initWithRootViewController(@director)</span><br><span class="line">    @navigation_controller.navigationBarHidden = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)</span><br><span class="line">    @window.setRootViewController(@navigation_controller)</span><br><span class="line">    @window.makeKeyAndVisible</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">applicationWillResignActive</span><span class="params">(app)</span></span></span><br><span class="line">    @director.pause <span class="keyword">if</span> @navigation_controller.visibleViewController == @director</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">applicationDidBecomeActive</span><span class="params">(app)</span></span></span><br><span class="line">    @director.resume <span class="keyword">if</span> @navigation_controller.visibleViewController == @director</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">applicationDidEnterBackground</span><span class="params">(app)</span></span></span><br><span class="line">    @director.stop_animation <span class="keyword">if</span> @navigation_controller.visibleViewController == @director</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">applicationWillEnterForeground</span><span class="params">(app)</span></span></span><br><span class="line">    @director.start_animation <span class="keyword">if</span> @navigation_controller.visibleViewController == @director</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">applicationWillTerminate</span><span class="params">(app)</span></span></span><br><span class="line">    @director.<span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">applicationDidReceiveMemoryWarning</span><span class="params">(app)</span></span></span><br><span class="line">    @director.purge_cached_data</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">applicationSignificantTimeChange</span><span class="params">(app)</span></span></span><br><span class="line">    @director.set_next_delta_time_zero <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Rakefileは「require ‘joybox’」以外はいつも通りのようです。</p><figure class="highlight ruby"><figcaption><span>Rakefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">$:.unshift(<span class="string">"/Library/RubyMotion/lib"</span>)</span><br><span class="line"><span class="keyword">require</span> <span class="string">'motion/project/template/ios'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'joybox'</span></span><br><span class="line"></span><br><span class="line">Motion::Project::App.setup <span class="keyword">do</span> <span class="params">|app|</span></span><br><span class="line">  <span class="comment"># Use `rake config' to see complete project settings.</span></span><br><span class="line">  app.name = <span class="string">'joybox_test'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="joyboxで簡単な処理を書いてみる"><a href="#joyboxで簡単な処理を書いてみる" class="headerlink" title="joyboxで簡単な処理を書いてみる"></a>joyboxで簡単な処理を書いてみる</h3><p>cocos2dでお馴染みのCCSceneクラスをjoybox風に書いてみました。<br>ラベルを表示したり、画像を表示したりする処理を行なってます。  </p><figure class="highlight ruby"><figcaption><span>app/my_scene.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScene</span> &lt; Joybox::Core::<span class="title">Scene</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on_enter</span></span></span><br><span class="line"></span><br><span class="line">    label = Label.new(</span><br><span class="line">      <span class="symbol">text:</span> <span class="string">"Congratulations!!"</span>,</span><br><span class="line">      <span class="symbol">font_size:</span> <span class="number">40</span>,</span><br><span class="line">      <span class="symbol">color:</span> Color.new(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>),</span><br><span class="line">      <span class="symbol">position:</span> [Screen.half_width, Screen.half_height],</span><br><span class="line">      <span class="symbol">dimensions:</span> [<span class="number">120</span>, <span class="number">40</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span> &lt;&lt; label</span><br><span class="line"></span><br><span class="line">    sprite = Sprite.new(</span><br><span class="line">      <span class="symbol">file_name:</span> <span class="string">'apple.jpg'</span>,</span><br><span class="line">      <span class="symbol">position:</span> [Screen.half_width, Screen.half_height + <span class="number">80</span>],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span> &lt;&lt; sprite</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>app_delegate.rbのapplicationメソッド内に処理を追加します。</p><figure class="highlight ruby"><figcaption><span>app/app_delegate.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(application, <span class="symbol">didFinishLaunchingWithOptions:</span>launchOptions)</span></span></span><br><span class="line"></span><br><span class="line">  @director = Joybox::Configuration.setup <span class="keyword">do</span></span><br><span class="line">    director <span class="symbol">display_stats:</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  @navigation_controller = UINavigationController.alloc.initWithRootViewController(@director)</span><br><span class="line">  @navigation_controller.navigationBarHidden = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)</span><br><span class="line">  @window.setRootViewController(@navigation_controller)</span><br><span class="line">  @window.makeKeyAndVisible</span><br><span class="line"></span><br><span class="line">  @director &lt;&lt; MyScene.new <span class="comment"># 追加</span></span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>rakeコマンドを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rake</span><br></pre></td></tr></table></figure><p>こんな感じで表示されました。</p><img src="/blog/images/2013-07-18-rubymotion-joybox.png"><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>joyboxを使った場合、cocos2dの処理をスネークケースでrubyぽく書けるようです。<br>ただ、いつの間にかRubymotionのライセンスが切れていて、<br>古いRubymotionでjoyboxが動かず色々ハマりました。<br>ちゃんとライセンス更新したほうがいいみたいです。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://great-h.github.io/events/event-009.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;すごい広島#9&lt;/a&gt;に参加してきました。&lt;br&gt;最近、&lt;a href=&quot;http://www.rubymotion.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RubyMotion&lt;/a&gt;で遊べてなかったので、&lt;br&gt;この機会にRubyMotionで&lt;a href=&quot;http://www.cocos2d-iphone.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cocos2d&lt;/a&gt;やってみようと思い立ちました。  &lt;/p&gt;
&lt;p&gt;RubyMotionから&lt;a href=&quot;http://cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cocoapods&lt;/a&gt;を使ってcocos2dをインストールすると、&lt;br&gt;毎回、cocos2dのソースのダウンロードで待たされてしまう様なので&lt;br&gt;rubymotion + joyboxを使うとその辺が楽になるのか試してみました。&lt;/p&gt;
&lt;h3 id=&quot;今回やったこと&quot;&gt;&lt;a href=&quot;#今回やったこと&quot; class=&quot;headerlink&quot; title=&quot;今回やったこと&quot;&gt;&lt;/a&gt;今回やったこと&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;joyboxのインストール&lt;/li&gt;
&lt;li&gt;プロジェクトの雛形の生成&lt;/li&gt;
&lt;li&gt;joyboxで簡単な処理を書いてみる&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="rubymotion" scheme="http://blog.ogatomo.com/categories/rubymotion/"/>
    
    
  </entry>
  
  <entry>
    <title>Gitlabをubuntuにインストールする方法</title>
    <link href="http://blog.ogatomo.com/blog/2013/06/26/how-to-install-gitlab-in-ubuntu-12-04-64bit/"/>
    <id>http://blog.ogatomo.com/blog/2013/06/26/how-to-install-gitlab-in-ubuntu-12-04-64bit/</id>
    <published>2013-06-26T14:52:00.000Z</published>
    <updated>2018-05-10T01:34:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>GitlabをUbuntuにインストールしてみました。<br>構成は以下の通りです。  </p><ul><li>Ubuntu12.04 64bit(Server Edition)</li><li>Ruby1.9.3-p392</li><li>nginx + unicorn</li><li>gitlab5.0</li></ul><a id="more"></a><h3 id="最新のgitをインストール"><a href="#最新のgitをインストール" class="headerlink" title="最新のgitをインストール"></a>最新のgitをインストール</h3><p>Gitlabのソース取得や、Gitlab内部の処理でgitが必要になるので、<br>ひとまずgitを最新にしておきます。  </p><p>sources.listファイルを編集し、リポジトリを追加します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/apt/sources.list</span></span><br></pre></td></tr></table></figure></p><p>以下を追記します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://ppa.launchpad.net/git-core/ppa/ubuntu precise main</span><br><span class="line">deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu precise main</span><br></pre></td></tr></table></figure></p><p>gitをインストールします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get update</span></span><br><span class="line"><span class="comment"># apt-get install git-core</span></span><br></pre></td></tr></table></figure></p><h3 id="rubyのインストール"><a href="#rubyのインストール" class="headerlink" title="rubyのインストール"></a>rubyのインストール</h3><p>rbenvを使ってrubyをインストールします。<br>まずは、rbenvをインストールします。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /usr/local</span></span><br><span class="line"><span class="comment"># git clone git://github.com/sstephenson/rbenv.git rbenv</span></span><br><span class="line"><span class="comment"># mkdir rbenv/shims rbenv/versions</span></span><br><span class="line"><span class="comment"># git clone git://github.com/sstephenson/ruby-build.git ruby-build</span></span><br><span class="line"><span class="comment"># cd ruby-build</span></span><br><span class="line"><span class="comment"># ./install.sh</span></span><br></pre></td></tr></table></figure><p>rbenvが有効となるように、設定ファイル作成します。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/profile.d/rbenv.sh</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RBENV_ROOT=<span class="string">"/usr/local/rbenv"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/rbenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(rbenv init -)</span>"</span></span><br></pre></td></tr></table></figure><p>rbenvを手動で有効にします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># source /etc/profile.d/rbenv.sh</span><br></pre></td></tr></table></figure></p><p>rbenvでインストールできるrubyのバージョンを確認します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rbenv install --list</span><br></pre></td></tr></table></figure></p><p>ruby-1.9.3-p392をインストールします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install build-essential libreadline-dev libssl-dev zlib1g-dev</span><br><span class="line"># rbenv install 1.9.3-p392</span><br><span class="line"># rbenv global 1.9.3-p392</span><br></pre></td></tr></table></figure></p><p>gemコマンドで、bundlerを入れておきます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># gem install bundler</span><br></pre></td></tr></table></figure></p><h3 id="Gitlab用のユーザー作成"><a href="#Gitlab用のユーザー作成" class="headerlink" title="Gitlab用のユーザー作成"></a>Gitlab用のユーザー作成</h3><p>Gitlab用のユーザーを作成します。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># adduser --disabled-login --gecos &apos;GitLab&apos; git</span><br></pre></td></tr></table></figure><p>上記のgitユーザーを使ってGitlabを動かすため、<br>Gitlabのソースファイルや、gitリポジトリは<br>gitユーザーが読み書き可能な設定にする必要があります。  </p><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /home/git/.profile</span><br></pre></td></tr></table></figure><p>以下の内容で作成します。（rbenvの設定読込）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile.d/rbenv.sh</span><br></pre></td></tr></table></figure></p><h4 id="Gitlab-shellをインストール"><a href="#Gitlab-shellをインストール" class="headerlink" title="Gitlab-shellをインストール"></a>Gitlab-shellをインストール</h4><p>gitlab-shellのソースファイルを取得します。<br><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/gitlabhq/gitlab-shell.git</span><br></pre></td></tr></table></figure></p><p>設定ファイルを変更します。<br><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gitlab-shell</span><br><span class="line">$ cp config.yml.example config.yml</span><br><span class="line">$ vi config.yml</span><br></pre></td></tr></table></figure></p><p>自分の環境に合わせて、config.ymlを編集します。<br><figure class="highlight ruby"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitLab user. git by default</span></span><br><span class="line"><span class="symbol">user:</span> git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Url to gitlab instance. Used for api calls</span></span><br><span class="line"><span class="symbol">gitlab_url:</span> <span class="string">"http://gitlab.ogatomo.com/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Repositories path</span></span><br><span class="line"><span class="symbol">repos_path:</span> <span class="string">"/home/git/repos"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># File used as authorized_keys for gitlab user</span></span><br><span class="line"><span class="symbol">auth_file:</span> <span class="string">"/home/git/.ssh/authorized_keys"</span></span><br></pre></td></tr></table></figure></p><p>インストールスクリプトを実行します。<br><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/install</span><br></pre></td></tr></table></figure></p><p>リポジトリ用のディレクトリを作成します。<br><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /home/git/repos</span><br></pre></td></tr></table></figure></p><h4 id="Gitlab用のデータベース作成"><a href="#Gitlab用のデータベース作成" class="headerlink" title="Gitlab用のデータベース作成"></a>Gitlab用のデータベース作成</h4><p>MySQLサーバーと、GitlabからMySQLを使うために必要なライブラリ類をインストールします。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install -y mysql-server mysql-client libmysqlclient-dev</span></span><br></pre></td></tr></table></figure><p>データベース作成を作成します。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;gitlab&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;gitlab&apos;;</span><br><span class="line">mysql&gt; CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;</span><br><span class="line">mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO &apos;gitlab&apos;@&apos;localhost&apos;;</span><br><span class="line">mysql&gt; \q</span><br></pre></td></tr></table></figure><h4 id="Gitlabのインストール"><a href="#Gitlabのインストール" class="headerlink" title="Gitlabのインストール"></a>Gitlabのインストール</h4><p>githubからGitlabのソースコードをgitコマンドで取得します。  </p><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/git</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/gitlabhq/gitlabhq.git gitlab</span><br></pre></td></tr></table></figure><p>取得し終わったら、Gitlabの設定ファイルを作成しておきます。  </p><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">$ cp config/unicorn.rb.example config/unicorn.rb</span><br><span class="line">$ cp config/gitlab.yml.example config/gitlab.yml</span><br><span class="line">$ vi config/gitlab.yml</span><br><span class="line">$ diff config/gitlab.yml.example config/gitlab.yml</span><br></pre></td></tr></table></figure><p>メールアドレス(email_from,support_email)とホスト名(host)など、<br>自分の環境に合わせて変更します</p><p>続けて、unicornの設定ファイルと、データベースの接続設定を行います。<br><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp config/unicorn.rb.example config/unicorn.rb</span><br><span class="line">$ cp config/database.yml.mysql config/database.yml</span><br><span class="line">$ vi config/database.yml</span><br></pre></td></tr></table></figure></p><p>設定ファイルの準備が出来たら、Gitlabに必要なパッケージをインストールします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install libicu-dev  libxml2-dev libxslt-dev</span></span><br><span class="line"><span class="comment"># gem install charlock_holmes --version '0.6.9'</span></span><br><span class="line"><span class="comment"># apt-get install -y redis-server postfix</span></span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bundle install --deployment --without development <span class="built_in">test</span> postgres</span><br><span class="line">$ bundle <span class="built_in">exec</span> rake db:setup RAILS_ENV=production</span><br><span class="line">$ bundle <span class="built_in">exec</span> rake db:seed_fu RAILS_ENV=production</span><br><span class="line">$ bundle <span class="built_in">exec</span> rake gitlab:setup RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>Gitlabが使用する作業ディレクトリを作成します。</p><figure class="highlight sh"><figcaption><span>*gitユーザーで実行*</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/gitlab-satellites</span><br><span class="line">$ mkdir ~/gitlab/pids</span><br></pre></td></tr></table></figure><h4 id="nginxのインストール"><a href="#nginxのインストール" class="headerlink" title="nginxのインストール"></a>nginxのインストール</h4><p>最後に、nginxをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install nginx</span></span><br><span class="line"><span class="comment"># curl --output /etc/nginx/sites-available/gitlab https://raw.github.com/gitlabhq/gitlab-recipes/master/nginx/gitlab</span></span><br><span class="line"><span class="comment"># ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/gitlab</span></span><br><span class="line"><span class="comment"># service nginx restart</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitlabをUbuntuにインストールしてみました。&lt;br&gt;構成は以下の通りです。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu12.04 64bit(Server Edition)&lt;/li&gt;
&lt;li&gt;Ruby1.9.3-p392&lt;/li&gt;
&lt;li&gt;nginx + unicorn&lt;/li&gt;
&lt;li&gt;gitlab5.0&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="gitlab" scheme="http://blog.ogatomo.com/categories/gitlab/"/>
    
    
  </entry>
  
  <entry>
    <title>railsでsettingslogicを使った時のメモ</title>
    <link href="http://blog.ogatomo.com/blog/2013/06/20/settinglogic-in-rails/"/>
    <id>http://blog.ogatomo.com/blog/2013/06/20/settinglogic-in-rails/</id>
    <published>2013-06-20T14:55:00.000Z</published>
    <updated>2018-05-10T01:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>RailsなどでWebアプリケーションを作成する際、環境に依存する値を扱う必要が生じた時は、<br>settingslogicというgemを使うと便利です。<br>このgemを使えば、設定ファイル用のyamlファイルをRubyから簡単に扱う事ができます。  </p><a id="more"></a><p>Railsの場合、以下の手順でアプリケーションにsettingslogicを組み込む事が出来ます。  </p><ul><li>Gemfileにsettingslogic追加</li><li>yamlファイルを適当なファイル名でconfigディレクトリ配下に作成</li><li>Settingslogicクラスを継承したクラスを定義</li><li>アプリケーションにSettingslogicを使ったコードを記述</li></ul><h3 id="Gemfileにsettingslogic追加"><a href="#Gemfileにsettingslogic追加" class="headerlink" title="Gemfileにsettingslogic追加"></a>Gemfileにsettingslogic追加</h3><p>Gemfileにsettingslogicを追加します。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'settingslogic'</span></span><br></pre></td></tr></table></figure><p>追加後は、bundle installを忘れずに。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bundle install</span><br></pre></td></tr></table></figure><h3 id="yamlファイルの作成"><a href="#yamlファイルの作成" class="headerlink" title="yamlファイルの作成"></a>yamlファイルの作成</h3><p>configディレクトリ配下に、application.ymlなど、好きな名前でyamlファイルを作成します。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi config/application.yml</span><br></pre></td></tr></table></figure><p>database.yml等と同様に、productionやdevelopmentなどの環境に応じて設定を分けることができます。</p><figure class="highlight yaml"><figcaption><span>application.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">production:</span></span><br><span class="line"><span class="attr">  aws:</span></span><br><span class="line"><span class="attr">    access_key_id:</span>  <span class="string">xxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="attr">    secret_access_key:</span> <span class="string">yyyyyyyyyyyyyyyyyy</span></span><br><span class="line"><span class="attr">  log_dir:</span> <span class="string">/tmp/log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line"><span class="attr">  aws:</span></span><br><span class="line"><span class="attr">    access_key_id:</span>  <span class="string">xxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="attr">    secret_access_key:</span> <span class="string">yyyyyyyyyyyyyyyyyy</span></span><br><span class="line"><span class="attr">  log_dir:</span> <span class="string">~/log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  aws:</span></span><br><span class="line"><span class="attr">    access_key_id:</span>  <span class="string">xxxxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="attr">    secret_access_key:</span> <span class="string">yyyyyyyyyyyyyyyyyy</span></span><br><span class="line"><span class="attr">  log_dir:</span> <span class="string">~/test_log</span></span><br></pre></td></tr></table></figure><h3 id="Settingslogicクラスを継承したクラスを定義"><a href="#Settingslogicクラスを継承したクラスを定義" class="headerlink" title="Settingslogicクラスを継承したクラスを定義"></a>Settingslogicクラスを継承したクラスを定義</h3><p>Settingslogicクラスを継承したクラスを、適当な場所に定義します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi lib/settings.rb</span><br></pre></td></tr></table></figure><p>sourceにファイル名、namespaceにproductionやdevelopmentなどの環境が指定されるようにしています。</p><figure class="highlight ruby"><figcaption><span>settings.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span> &lt; Settingslogic</span></span><br><span class="line">  source <span class="string">"<span class="subst">#&#123;Rails.root&#125;</span>/config/application.yml"</span></span><br><span class="line">  namespace Rails.env</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="アプリケーションにコードを記述"><a href="#アプリケーションにコードを記述" class="headerlink" title="アプリケーションにコードを記述"></a>アプリケーションにコードを記述</h3><p>アプリケーション側からは、設定ファイルから読み込んだ値をこんな感じで使えます。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'settings'</span></span><br><span class="line"></span><br><span class="line">AWS.config(<span class="symbol">:access_key_id</span>     =&gt; Settings.aws.access_key_id,</span><br><span class="line">           <span class="symbol">:secret_access_key</span> =&gt; Settings.aws.secret_access_key,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RailsなどでWebアプリケーションを作成する際、環境に依存する値を扱う必要が生じた時は、&lt;br&gt;settingslogicというgemを使うと便利です。&lt;br&gt;このgemを使えば、設定ファイル用のyamlファイルをRubyから簡単に扱う事ができます。  &lt;/p&gt;
    
    </summary>
    
      <category term="ruby" scheme="http://blog.ogatomo.com/categories/ruby/"/>
    
    
  </entry>
  
  <entry>
    <title>yard-modeを使ってみた</title>
    <link href="http://blog.ogatomo.com/blog/2013/06/15/yard-mode/"/>
    <id>http://blog.ogatomo.com/blog/2013/06/15/yard-mode/</id>
    <published>2013-06-15T03:36:00.000Z</published>
    <updated>2018-05-10T01:34:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>RubyにもJavaDocぽいものを出力するためのツールとして、YARDというものがあるらしい。<br>ハイライトをEmacsから行えないか調べた所、<br>yard-modeというのがあるらしいのでインストールしてみた。  </p><a id="more"></a><h4 id="事前に必要なもの"><a href="#事前に必要なもの" class="headerlink" title="事前に必要なもの"></a>事前に必要なもの</h4><ul><li>git</li><li>emacs</li><li>ruby-mode</li></ul><h3 id="yard-modeをgithubからclone"><a href="#yard-modeをgithubからclone" class="headerlink" title="yard-modeをgithubからclone"></a>yard-modeをgithubからclone</h3><p>yard-modeをgithubからcloneしてきます。<br>emacsの拡張は、submoduleにして.emacs.d配下に突っ込むようにしているので、<br>今回も同様にしてます。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.emacs.d</span><br><span class="line">$ git submodule add https://github.com/pd/yard-mode.el.git</span><br><span class="line"></span><br><span class="line">Cloning into <span class="string">'yard-mode.el'</span>...</span><br><span class="line">remote: Counting objects: 75, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (35/35), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 75 (delta 36), reused 71 (delta 32)</span><br><span class="line">Unpacking objects: 100% (75/75), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>clone後は、.emacs.d配下にyard-mode.elというディレクトリが作成され、yard-modeのソースコードがその中に入っています。  </p><h3 id="init-elにyard-modeの設定記述"><a href="#init-elにyard-modeの設定記述" class="headerlink" title="init.elにyard-modeの設定記述"></a>init.elにyard-modeの設定記述</h3><p>次に、~/.emacs.d/init.elファイルにyard-modeの設定を追記します。  </p><figure class="highlight plain"><figcaption><span>init.el</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(add-to-list &apos;load-path &quot;~/.emacs.d/yard-mode.el&quot;)</span><br><span class="line">(require &apos;yard-mode)</span><br></pre></td></tr></table></figure><p>rubyファイルを開いた時に、yard-modeが有効になるように設定します。  </p><figure class="highlight plain"><figcaption><span>init.el</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(add-hook &apos;ruby-mode-hook &apos;yard-mode)</span><br><span class="line">(add-hook &apos;ruby-mode-hook &apos;eldoc-mode)</span><br></pre></td></tr></table></figure><p>うまく設定されていれば、こんな感じでハイライトされます。  </p><img src="/blog/images/2013-06-15-yard-mode.png"><p>YARDのタグについては、<a href="http://rubydoc.info/docs/yard/file/docs/Tags.md" target="_blank" rel="noopener">こちら</a>が参考になりそうです。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RubyにもJavaDocぽいものを出力するためのツールとして、YARDというものがあるらしい。&lt;br&gt;ハイライトをEmacsから行えないか調べた所、&lt;br&gt;yard-modeというのがあるらしいのでインストールしてみた。  &lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://blog.ogatomo.com/categories/emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS5.8にs3fsをインストールする方法</title>
    <link href="http://blog.ogatomo.com/blog/2013/02/23/how-to-install-s3fs-in-centos5/"/>
    <id>http://blog.ogatomo.com/blog/2013/02/23/how-to-install-s3fs-in-centos5/</id>
    <published>2013-02-23T07:39:00.000Z</published>
    <updated>2018-05-10T01:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>S3をCentOSからファイルシステムっぽく使えないだろうか。<br><br>そんな事を考えつつ色々探していてたら<br><br>s3fsというのを見つけました。</p><h4 id="やったこと"><a href="#やったこと" class="headerlink" title="やったこと"></a>やったこと</h4><ul><li>FUSEをインストール</li><li>s3fsのコンパイルに必要なパッケージをyumでインストール</li><li>s3fsをインストール</li><li>S3にバケットを作成</li><li>IAMでs3用のユーザー作成</li><li>S3のバケットをマウント</li></ul><h4 id="事前に必要なもの"><a href="#事前に必要なもの" class="headerlink" title="事前に必要なもの"></a>事前に必要なもの</h4><p>git,make,gcc-c++が必要なので、<br><br>事前にインストールしておく必要があります。</p><a id="more"></a><h3 id="FUSEのインストール"><a href="#FUSEのインストール" class="headerlink" title="FUSEのインストール"></a>FUSEのインストール</h3><p>CentOSのyumリポジトリのFUSEはバージョンが古いらしく、<br><br>yumからインストールした場合、s3fsのコンパイルに失敗してしまいます。</p><p>なので、最新っぽいソースファイルをダウンロードし、<br><br>コンパイルしてインストールする必要があります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">curl -OL http://downloads.sourceforge.net/project/fuse/fuse-2.X/2.9.2/fuse-2.9.2.tar.gz</span><br><span class="line">tar xvzf fuse-2.9.2.tar.gz</span><br><span class="line">cd fuse-2.9.2</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="s3fsに必要なパッケージインストール"><a href="#s3fsに必要なパッケージインストール" class="headerlink" title="s3fsに必要なパッケージインストール"></a>s3fsに必要なパッケージインストール</h3><p>s3fsのインストールに必要なパッケージを幾つかインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install curl-devel libxml2-devel openssl-devel</span><br></pre></td></tr></table></figure><h3 id="s3fsをインストール"><a href="#s3fsをインストール" class="headerlink" title="s3fsをインストール"></a>s3fsをインストール</h3><p>gitでソースファイルを取得し、s3fsをインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">git clone git://github.com/memorycraft/s3fs-cloudpack.git</span><br><span class="line">cd s3fs-cloudpack</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="S3にバケットを作成"><a href="#S3にバケットを作成" class="headerlink" title="S3にバケットを作成"></a>S3にバケットを作成</h3><p>S3にバケットを作らないと何も始まらないので、<br><br>Management Consoleからバケットを作成します。</p><img src="/blog/images/2013-02-23-how-to-install-s3fs-in-centos5-s3_1.png"><p>「Create Bucket」をクリックし、バケットを作成します。</p><img src="/blog/images/2013-02-23-how-to-install-s3fs-in-centos5-s3_2.png"><p>バケット名とリージョンを入力し、「Create」をクリックします。<br><br>同じバケット名のバケットを、他のユーザーが既に作成していた場合はエラーになります。</p><img src="/blog/images/2013-02-23-how-to-install-s3fs-in-centos5-s3_3.png"><p>MacやLinuxなどのPCからファイルをアップロードする場合は、<br><br>s3cmdを使うと便利です。</p><h3 id="IAMでs3用のユーザー作成"><a href="#IAMでs3用のユーザー作成" class="headerlink" title="IAMでs3用のユーザー作成"></a>IAMでs3用のユーザー作成</h3><p><a href="http://aws.amazon.com/jp/iam/" target="_blank" rel="noopener">IAM</a>をManagement Consoleで開き、<br>S3にアクセスするためのユーザーを作成します。</p><img src="/blog/images/2013-02-23-how-to-install-s3fs-in-centos5-iam1.png"><p>「Create New User」をクリックします。</p><img src="/blog/images/2013-02-23-how-to-install-s3fs-in-centos5-iam2.png"><p>ユーザー名を入力し、作成を行うと<br><br>Access Key IDとSecret Key IDが作成されます。<br><br>この情報をテキストファイルにコピーしておくなどして保存しておきます。</p><img src="/blog/images/2013-02-23-how-to-install-s3fs-in-centos5-iam3.png"><p>ユーザーを作成後、一覧に作成したユーザーが表示されているので、<br><br>チェックボックスにチェックを入れ、選択状態にした後、<br><br>一覧の下のタブから「Permissions」を選択し、<br><br>「Attach User Policy」をクリックします。</p><img src="/blog/images/2013-02-23-how-to-install-s3fs-in-centos5-iam4.png"><p>s3への全てのアクセス権限を与えたい場合、<br><br>「Select Policy Template」から「Amazon S3 Full Access」の「Select」をクリックします。<br></p><p>「Policy Generator」や「Custom Policy」を使うと、細かくアクセス権限を指定できます。</p><img src="/blog/images/2013-02-23-how-to-install-s3fs-in-centos5-iam5.png"><p>「Apply Policy」をクリックし、アクセス権限の設定を適用します。<br></p><img src="/blog/images/2013-02-23-how-to-install-s3fs-in-centos5-iam6.png"><h3 id="s3のバケットをマウント"><a href="#s3のバケットをマウント" class="headerlink" title="s3のバケットをマウント"></a>s3のバケットをマウント</h3><p>S3に作成したバケットを、CentOSからファイルシステムっぽくマウントを行います。<br><br>まずは、/etc/passwd-s3fsファイルを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;bucket_name:access_key_id:secret_key_id&quot; &gt;&gt; /etc/passwd-s3fs</span><br><span class="line">chmod 600 /etc/passwd-s3fs</span><br></pre></td></tr></table></figure><p>上記のファイルの内容は以下の通りです。</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">設定する値</th></tr></thead><tbody><tr><td style="text-align:left">bucket_name</td><td style="text-align:left">作成したバケット名</td></tr><tr><td style="text-align:left">access_key_id</td><td style="text-align:left">IAMで作成したユーザーのAccessKeyID</td></tr><tr><td style="text-align:left">secret_key_id</td><td style="text-align:left">IAMで作成したユーザーのSecretKeyID</td></tr></tbody></table><p>s3fsを使って、マウントを行います。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/s3</span><br><span class="line">echo &quot;s3fs#backet_name /mnt/s3 fuse allow_other,url=https://s3.amazonaws.com 0 0&quot; &gt;&gt; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure><p>マウント時のオプションの説明は以下の通りです。</p><table><thead><tr><th style="text-align:left">オプション</th><th style="text-align:left">説明</th></tr></thead><tbody><tr><td style="text-align:left">allow_other</td><td style="text-align:left">root以外のユーザーも/mnt/s3に読込・書込が行えます</td></tr><tr><td style="text-align:left">url=<a href="https://s3.amazonaws.com" target="_blank" rel="noopener">https://s3.amazonaws.com</a></td><td style="text-align:left">httpsを使ってS3にアクセスします</td></tr></tbody></table><h3 id="s3fsを使ってみた感想など"><a href="#s3fsを使ってみた感想など" class="headerlink" title="s3fsを使ってみた感想など"></a>s3fsを使ってみた感想など</h3><p>一応、動いているようには見えるのですが、<br><br>自分のMacからs3cmdを使ってファイルを更新した場合、<br><br>s3fsでマウントしたディレクトリからファイルを読むと<br><br>ファイルがちゃんと読めない事があります。</p><p>なので、Macからs3cmdでファイルを更新する度に<br><br>s3fsでマウントしたディレクトリをunmountしてmountしなおすといった作業が必要でした。<br></p><p>S3を<a href="http://aws.clouddesignpattern.org/index.php/CDP:Web_Storage%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener">CDNの代わりっぽく</a>運用できるらしいので、<br><br>s3fsを使えばアプリに手を入れずにそういう事できるかなーとか思ってましたが、、、<br><br>もうちょい検証しないといけなさそう。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;S3をCentOSからファイルシステムっぽく使えないだろうか。&lt;br&gt;&lt;br&gt;そんな事を考えつつ色々探していてたら&lt;br&gt;&lt;br&gt;s3fsというのを見つけました。&lt;/p&gt;
&lt;h4 id=&quot;やったこと&quot;&gt;&lt;a href=&quot;#やったこと&quot; class=&quot;headerlink&quot; title=&quot;やったこと&quot;&gt;&lt;/a&gt;やったこと&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;FUSEをインストール&lt;/li&gt;
&lt;li&gt;s3fsのコンパイルに必要なパッケージをyumでインストール&lt;/li&gt;
&lt;li&gt;s3fsをインストール&lt;/li&gt;
&lt;li&gt;S3にバケットを作成&lt;/li&gt;
&lt;li&gt;IAMでs3用のユーザー作成&lt;/li&gt;
&lt;li&gt;S3のバケットをマウント&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;事前に必要なもの&quot;&gt;&lt;a href=&quot;#事前に必要なもの&quot; class=&quot;headerlink&quot; title=&quot;事前に必要なもの&quot;&gt;&lt;/a&gt;事前に必要なもの&lt;/h4&gt;&lt;p&gt;git,make,gcc-c++が必要なので、&lt;br&gt;&lt;br&gt;事前にインストールしておく必要があります。&lt;/p&gt;
    
    </summary>
    
      <category term="aws" scheme="http://blog.ogatomo.com/categories/aws/"/>
    
    
  </entry>
  
  <entry>
    <title>rubyの1.9.3-p385のコンパイルが失敗した時のメモ</title>
    <link href="http://blog.ogatomo.com/blog/2013/02/10/cannnot-compile-ruby-1-9-3/"/>
    <id>http://blog.ogatomo.com/blog/2013/02/10/cannnot-compile-ruby-1-9-3/</id>
    <published>2013-02-10T03:52:00.000Z</published>
    <updated>2018-05-10T01:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>2013年2月6日に、<a href="http://www.ruby-lang.org/ja/news/2013/02/06/ruby-1-9-3-p385-is-released/" target="_blank" rel="noopener">ruby 1.9.3-p385</a>がリリースされたので、<br>早速、rbenvでインストールしようとしたところ、<br>エラーが出てコンパイルができなかった時の解決方法のメモ。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Installing ruby-1.9.3-p385...</span><br><span class="line"></span><br><span class="line">BUILD FAILED</span><br><span class="line"></span><br><span class="line">Inspect or clean up the working tree at /var/folders/p8/x23nd_qs0_7fsg0s5p7frq7w0000gn/T/ruby-build.20130210114753.2144</span><br><span class="line">Results logged to /var/folders/p8/x23nd_qs0_7fsg0s5p7frq7w0000gn/T/ruby-build.20130210114753.2144.log</span><br><span class="line"></span><br><span class="line">Last 10 log lines:</span><br><span class="line">compiling regenc.c</span><br><span class="line">compiling regerror.c</span><br><span class="line">compiling regexec.c</span><br><span class="line">compiling regparse.c</span><br><span class="line">regparse.c:582:15: error: implicit conversion loses integer precision: &apos;st_index_t&apos; (aka &apos;unsigned long&apos;) to &apos;int&apos; [-Werror,-Wshorten-64-to-32]</span><br><span class="line">    return t-&gt;num_entries;</span><br><span class="line">    ~~~~~~ ~~~^~~~~~~~~~~</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [regparse.o] Error 1</span><br><span class="line">make: *** Waiting for unfinished jobs....</span><br></pre></td></tr></table></figure><p>↓を実行するとうまくいった。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ export CC=/usr/bin/gcc</span><br><span class="line">$ rbenv install 1.9.3-p385</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2013年2月6日に、&lt;a href=&quot;http://www.ruby-lang.org/ja/news/2013/02/06/ruby-1-9-3-p385-is-released/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ruby 1.9.3-p385&lt;/a&gt;がリリースされたので、&lt;br&gt;早速、rbenvでインストールしようとしたところ、&lt;br&gt;エラーが出てコンパイルができなかった時の解決方法のメモ。&lt;/p&gt;
    
    </summary>
    
      <category term="ruby" scheme="http://blog.ogatomo.com/categories/ruby/"/>
    
    
  </entry>
  
  <entry>
    <title>redmineのアカウントでgitを使う方法</title>
    <link href="http://blog.ogatomo.com/blog/2013/01/10/how-to-use-git-by-account-of-redmine/"/>
    <id>http://blog.ogatomo.com/blog/2013/01/10/how-to-use-git-by-account-of-redmine/</id>
    <published>2013-01-10T13:08:00.000Z</published>
    <updated>2018-05-10T01:34:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>http(もしくはhttps)でgitのリポジトリを公開している場合に、<br>Redmineのアカウントでそのまま認証できると便利そうだったので<br>設定を行なってみました。</p><p>今回は、Ubuntu12.04とRedmine2.1.4の環境にRedmine.pmをインストールしました。<br><br><a href="/blog/2012/05/17/redmine-pm-setting-memo/">CentOSの時のメモ</a>と、違いはそんなに無さそうです。</p><p>設定方法は<a href="https://github.com/alminium/alminium" target="_blank" rel="noopener">Alminium</a>の設定スクリプトを参考にさせて頂きました。</p><a id="more"></a><h3 id="gitのインストール"><a href="#gitのインストール" class="headerlink" title="gitのインストール"></a>gitのインストール</h3><p>gitのバージョンを最新にするため、sources.listファイルを編集します。<br><figure class="highlight sh"><figcaption><span>/etc/apt/sources.list</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://ppa.launchpad.net/git-core/ppa/ubuntu precise main</span><br><span class="line">deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu precise main</span><br></pre></td></tr></table></figure></p><p>gitのリポジトリを登録します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-software-properties</span><br><span class="line">add-apt-repository ppa:git-core/ppa</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure></p><p>gitをインストールします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure></p><h3 id="Redmine-pmのインストール"><a href="#Redmine-pmのインストール" class="headerlink" title="Redmine.pmのインストール"></a>Redmine.pmのインストール</h3><p>Basic認証時にRedmineとDB連携するので、その処理に必要なライブラリをインストール<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libapache2-mod-auth-mysql libdigest-sha-perl libapache-dbi-perl libdbd-mysql-perl</span><br></pre></td></tr></table></figure></p><p>RedmineがLDAP認証を使用している場合、以下も追加でインストール<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libauthen-simple-ldap-perl</span><br></pre></td></tr></table></figure></p><p>Redmine.pmのインストールを行います。<br><br>一部、Perlのクラス名を変更しないと動かない箇所があるので修正しつつコピーします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/perl/Apache/Authn</span><br><span class="line">cat /var/www/redmine/extra/svn/Redmine.pm |sed <span class="string">'s/Digest::SHA1/Digest::SHA/g'</span> &gt; /etc/perl/Apache/Authn/Redmine.pm</span><br></pre></td></tr></table></figure></p><h3 id="apacheのconfの記述"><a href="#apacheのconfの記述" class="headerlink" title="apacheのconfの記述"></a>apacheのconfの記述</h3><p>まずは、gitリポジトリ用のディレクトリを用意します。<br><br>この例ではgitリポジトリ用のディレクトリ名は<br><br>/path/to/git/reposとして説明します。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /path/to/git/repos</span><br></pre></td></tr></table></figure><p>Git用のconfを記述します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/apache2/sites-available/vcs</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>/etc/apache2/sites-available/vcs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PerlLoadModule Apache::Authn::Redmine</span><br><span class="line">PerlLoadModule Authen::Simple::LDAP <span class="comment">#LDAP認証を使う場合のみ必要</span></span><br><span class="line"></span><br><span class="line">SetEnv GIT_PROJECT_ROOT /path/to/git/repos/</span><br><span class="line">SetEnv GIT_HTTP_EXPORT_ALL</span><br><span class="line">ScriptAlias /git/ /usr/lib/git-core/git-http-backend/</span><br><span class="line"></span><br><span class="line">&lt;Location /git/&gt;</span><br><span class="line">    PerlAccessHandler Apache::Authn::Redmine::access_handler</span><br><span class="line">    PerlAuthenHandler Apache::Authn::Redmine::authen_handler</span><br><span class="line"></span><br><span class="line">    AuthType Basic</span><br><span class="line">    AuthName Git</span><br><span class="line">    Require valid-user</span><br><span class="line"></span><br><span class="line">    RedmineDSN <span class="string">"DBI:mysql:database=redmine_db;host=192.168.1.xx"</span></span><br><span class="line">    RedmineDbUser <span class="string">"redmine_db_user"</span></span><br><span class="line">    RedmineDbPass <span class="string">"**********************"</span></span><br><span class="line">    RedmineGitSmartHttp yes</span><br><span class="line">&lt;/Location&gt;</span><br></pre></td></tr></table></figure><p>モジュールとconfを有効にします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a2enmod auth_mysql</span><br><span class="line">a2ensite vcs</span><br></pre></td></tr></table></figure></p><p>confファイルに誤りが無いことを確認し、apache再起動します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apache2ctl configtest</span><br><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure></p><h3 id="Gitのリポジトリテスト"><a href="#Gitのリポジトリテスト" class="headerlink" title="Gitのリポジトリテスト"></a>Gitのリポジトリテスト</h3><p>Redmineにプロジェクトを作成し、プロジェクトの識別子をgit_testにします。<br><br>プロジェクトメンバーに、gitリポジトリにアクセスさせたいメンバーを追加します。<br><br>次に、以下の手順でgitのリポジトリの作成を行います。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/git/repos/</span><br><span class="line">mkdir git_test</span><br><span class="line"><span class="built_in">cd</span> git_test</span><br><span class="line">git --bare init --shared</span><br><span class="line">git config --file config http.receivepack <span class="literal">true</span></span><br><span class="line">git update-server-info</span><br></pre></td></tr></table></figure><p>次に、プロジェクトの設定のリポジトリで、上記のリポジトリの追加を行います。<br><br>（管理の設定のリポジトリで、gitを有効にしておく必要があります）<br><br>追加後、以下のコマンドでリポジトリが使えるか試します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://サーバーのIPもしくはドメイン名/git/git_test</span><br></pre></td></tr></table></figure><p>ユーザー名とパスワードを聞かれるので、Redmineのログインユーザー名とパスワードを入力します。<br><br>設定がうまく出来ていれば、認証成功後にcloneが行われます。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http(もしくはhttps)でgitのリポジトリを公開している場合に、&lt;br&gt;Redmineのアカウントでそのまま認証できると便利そうだったので&lt;br&gt;設定を行なってみました。&lt;/p&gt;
&lt;p&gt;今回は、Ubuntu12.04とRedmine2.1.4の環境にRedmine.pmをインストールしました。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;/blog/2012/05/17/redmine-pm-setting-memo/&quot;&gt;CentOSの時のメモ&lt;/a&gt;と、違いはそんなに無さそうです。&lt;/p&gt;
&lt;p&gt;設定方法は&lt;a href=&quot;https://github.com/alminium/alminium&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alminium&lt;/a&gt;の設定スクリプトを参考にさせて頂きました。&lt;/p&gt;
    
    </summary>
    
      <category term="redmine" scheme="http://blog.ogatomo.com/categories/redmine/"/>
    
    
  </entry>
  
  <entry>
    <title>Redmineにコードレビューのプラグインをインストールする方法</title>
    <link href="http://blog.ogatomo.com/blog/2013/01/04/how-to-install-code-review-plug-in-in-redmine/"/>
    <id>http://blog.ogatomo.com/blog/2013/01/04/how-to-install-code-review-plug-in-in-redmine/</id>
    <published>2013-01-04T05:05:00.000Z</published>
    <updated>2014-01-25T10:59:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>RedmineでGithubみたくブラウザでコードレビュー出来るようにしたかったので、<br><br>コードレビュープラグインを入れてみました。<br><br>インストールした環境は以下の通り。<br></p><ul><li>Ubuntu12.04</li><li>Redmine2.1.4</li><li>Ruby1.9.3 p327</li></ul><a id="more"></a><h3 id="プラグインのソースを取得"><a href="#プラグインのソースを取得" class="headerlink" title="プラグインのソースを取得"></a>プラグインのソースを取得</h3><p>Redmineのプラグインディレクトリに移動し、<br><br>コードレビュープラグインのソースファイルをhgコマンドで取得します。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/redmine/plugins</span><br><span class="line">sudo hg clone https://bitbucket.org/haru_iida/redmine_code_review</span><br></pre></td></tr></table></figure><p>hgコマンドがインストールされていない場合、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mercurial</span><br></pre></td></tr></table></figure></p><p>でインストール出来ます。</p><h3 id="プラグインのインストール"><a href="#プラグインのインストール" class="headerlink" title="プラグインのインストール"></a>プラグインのインストール</h3><p>一旦、redmineのインストールディレクトリ直下まで移動します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/redmine</span><br></pre></td></tr></table></figure><p>コードレビュープラグインに必要なgemをインストールします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bundle install</span><br></pre></td></tr></table></figure></p><p>コードレビュープラグイン用のテーブルを作成します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rake redmine:plugins:migrate RAILS_ENV=production</span><br></pre></td></tr></table></figure></p><p>インストールに成功した場合、管理画面からプラグインのバージョン情報などが確認できます。<br></p><img src="/blog/images/2013-01-04_code_review_plugin_version.png"><p>上記の様に表示されない場合、apacheの再起動などを行なってみてください。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></p><h3 id="初期設定など"><a href="#初期設定など" class="headerlink" title="初期設定など"></a>初期設定など</h3><p>インストールしただけだと使えるようになってくれないので、<br><br>必要な設定を行います。<br><br>まずは、プロジェクト作成時にプラグインが有効になるように、<br><br>管理画面の設定から、プロジェクトのモジュールを有効にします。</p><img src="/blog/images/2013-01-04_code_review_plugin_settings1.png"><p>既存のプロジェクトでプラグインを使いたい場合、<br><br>プロジェクトの設定からモジュールを開きモジュールを有効にします。</p><img src="/blog/images/2013-01-04_code_review_plugin_settings2.png"><h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><p>プロジェクトのリポジトリから適当なソースを開き、「レビューを書く」リンクをクリックします。</p><img src="/blog/images/2013-01-04_code_review_plugin_usage1.png"><p>すると、鉛筆マークが表示されるので、レビューの結果を書きたい行の鉛筆マークをクリックします。</p><img src="/blog/images/2013-01-04_code_review_plugin_usage2.png"><p>レビュー結果の入力フォームが表示されるので、タイトルなどを入力し、「適用」ボタンをクリックします。</p><img src="/blog/images/2013-01-04_code_review_plugin_usage3.png"><p>レビュー結果はチケットとして登録され、レビュー結果が登録された行は吹き出しのアイコンが表示されるようになります。<br><br>（レビュー結果の一覧は、コードレビューのタブから確認できます）</p><img src="/blog/images/2013-01-04_code_review_plugin_usage4.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RedmineでGithubみたくブラウザでコードレビュー出来るようにしたかったので、&lt;br&gt;&lt;br&gt;コードレビュープラグインを入れてみました。&lt;br&gt;&lt;br&gt;インストールした環境は以下の通り。&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu12.04&lt;/li&gt;
&lt;li&gt;Redmine2.1.4&lt;/li&gt;
&lt;li&gt;Ruby1.9.3 p327&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="redmine" scheme="http://blog.ogatomo.com/categories/redmine/"/>
    
    
  </entry>
  
  <entry>
    <title>redmineのインストール方法</title>
    <link href="http://blog.ogatomo.com/blog/2013/01/03/the-installation-method-of-redmine/"/>
    <id>http://blog.ogatomo.com/blog/2013/01/03/the-installation-method-of-redmine/</id>
    <published>2013-01-03T12:05:00.000Z</published>
    <updated>2018-05-10T01:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近、Redmine2.1をインストールする際に行った手順のメモです。<br></p><p>構成は以下の通りです。<br></p><ul><li>Ubuntu12.04 64bit(Server Edition)</li><li>Ruby1.9.3-p327</li><li>apache + passenger</li></ul><a id="more"></a><h3 id="rubyのインストール"><a href="#rubyのインストール" class="headerlink" title="rubyのインストール"></a>rubyのインストール</h3><p>まず、rubyのコンパイルに必要なモジュール一式をapt-getでインストールします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install libncurses5-dev libgdbm-dev libssl-dev libyaml-dev libreadline-dev tk-dev zlib1g-dev</span><br></pre></td></tr></table></figure></p><p>次にrubyをインストールします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">sudo wget http://core.ring.gr.jp/archives/lang/ruby/ruby-1.9.3-p327.tar.gz</span><br><span class="line">sudo tar xvzf ruby-1.9.3-p327.tar.gz</span><br><span class="line">cd ruby-1.9.3-p327</span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>ちゃんとインストールされてるか確認します。</p><figure class="highlight sh"><figcaption><span>rubyのバージョンを表示</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br><span class="line">ruby 1.9.3p327 (2012-11-10 revision 37606) [x86_64-linux]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>gemのバージョンを表示</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem -v</span><br><span class="line">1.8.23</span><br></pre></td></tr></table></figure><h3 id="apacheとpassengerのインストール"><a href="#apacheとpassengerのインストール" class="headerlink" title="apacheとpassengerのインストール"></a>apacheとpassengerのインストール</h3><p>次に、apacheとpassengerをインストールします。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install apache2 apache2-dev libcurl4-openssl-dev</span><br><span class="line">sudo gem install passenger</span><br></pre></td></tr></table></figure><p>apache用のpassengerモジュールをインストールします。<br><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passenger-install-apache2-module</span><br></pre></td></tr></table></figure></p><p>対話形式でインストールを進めます。<br><br>Webサーバーの候補が出てくるので、apacheを選択します<br><br>インストールが成功すると、以下の様な出力がでるので内容をメモっておきます。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------</span><br><span class="line">Deploying a Ruby on Rails application: an example</span><br><span class="line"></span><br><span class="line">Suppose you have a Rails application in /somewhere. Add a virtual host to your</span><br><span class="line">Apache configuration file and set its DocumentRoot to /somewhere/public:</span><br><span class="line"></span><br><span class="line">   &lt;VirtualHost *:80&gt;</span><br><span class="line">      ServerName www.yourhost.com</span><br><span class="line">      # !!! Be sure to point DocumentRoot to &apos;public&apos;!</span><br><span class="line">      DocumentRoot /somewhere/public    </span><br><span class="line">      &lt;Directory /somewhere/public&gt;</span><br><span class="line">         # This relaxes Apache security settings.</span><br><span class="line">         AllowOverride all</span><br><span class="line">         # MultiViews must be turned off.</span><br><span class="line">         Options -MultiViews</span><br><span class="line">      &lt;/Directory&gt;</span><br><span class="line">   &lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">And that&apos;s it! You may also want to check the Users Guide for security and</span><br><span class="line">optimization tips, troubleshooting and other useful information:</span><br><span class="line"></span><br><span class="line">  /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.18/doc/Users guide Apache.html</span><br><span class="line"></span><br><span class="line">Enjoy Phusion Passenger, a product of Phusion (www.phusion.nl) :-)</span><br><span class="line">https://www.phusionpassenger.com</span><br><span class="line"></span><br><span class="line">Phusion Passenger is a trademark of Hongli Lai &amp; Ninh Bui.</span><br></pre></td></tr></table></figure><p>passenger用の設定ファイルを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo echo /etc/apache2/mods-available/passenger.load</span><br></pre></td></tr></table></figure><figure class="highlight apache"><figcaption><span>/etc/apache2/mods-available/passenger.load</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">LoadModule</span></span> passenger_module /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.18/ext/apache2/mod_passenger.so</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apache2/mods-available/passenger.conf</span><br></pre></td></tr></table></figure><figure class="highlight apache"><figcaption><span>/etc/apache2/mods-available/passenger.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PassengerRoot</span> /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.18</span><br><span class="line"><span class="attribute">PassengerRuby</span> /usr/local/bin/ruby</span><br></pre></td></tr></table></figure><p>passengerの設定を有効にします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod passenger</span><br></pre></td></tr></table></figure></p><h3 id="Redmineのインストール"><a href="#Redmineのインストール" class="headerlink" title="Redmineのインストール"></a>Redmineのインストール</h3><p>gitもしくはSubversionのリポジトリからソースをチェックアウトします。<br><figure class="highlight sh"><figcaption><span>gitの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">sudo git <span class="built_in">clone</span> git://github.com/redmine/redmine.git redmine</span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><figcaption><span>subversionの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install subversion</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">sudo svn co http://svn.redmine.org/redmine/tags/2.1.4/ redmine</span><br></pre></td></tr></table></figure><p>redmineに必要なgemをインストールします。<br><br>（libmagickwand-devはrmagickというgemのインストール時に必要）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install bundler</span><br><span class="line"><span class="built_in">cd</span> redmine</span><br><span class="line">sudo apt-get install libmagickwand-dev</span><br><span class="line">sudo bundle install</span><br></pre></td></tr></table></figure></p><p>データベースの設定ファイルをテンプレートからコピーしておきます。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp config/database.yml.example config/database.yml</span><br><span class="line">sudo vi config/database.yml</span><br></pre></td></tr></table></figure></p><p>秘密トークン用のファイルを作成します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi config/initializers/secret_token.rb</span><br></pre></td></tr></table></figure></p><p>secret_tokenに適当な長さの文字列を設定します。（３２文字以上じゃないとダメだった気がする）<br><figure class="highlight ruby"><figcaption><span>config/initializers/secret_token.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedmineApp::Application.config.secret_token = <span class="string">'93aef08bf60862d2cceb5d167505e3aaf7a642025636b08c47b71a9e5ac44625d4820dfbd194a202'</span></span><br></pre></td></tr></table></figure></p><p>DBの設定ファイルを作成します。<br><br>sqlite用の設定になっています。<br><figure class="highlight yaml"><figcaption><span>config/database.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">production:</span></span><br><span class="line"><span class="attr">  adapter:</span> <span class="string">sqlite3</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">db/redmine.sqlite3</span></span><br></pre></td></tr></table></figure></p><p>redmineのDBを作成したり、必要なディレクトリを作ったりします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install sqlite3</span><br><span class="line">sudo RAILS_ENV=production rake db:migrate</span><br><span class="line">sudo rake generate_secret_token</span><br><span class="line">sudo mkdir tmp public/plugin_assets</span><br></pre></td></tr></table></figure></p><p>apacheがログファイルや添付ファイルを書き込めるように、<br>redmineディレクトリのオーナーを変更しておきます。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R www-data:www-data .</span><br></pre></td></tr></table></figure></p><h3 id="redmineの公開設定"><a href="#redmineの公開設定" class="headerlink" title="redmineの公開設定"></a>redmineの公開設定</h3><p>redmineをapacheで公開する設定を行います。<br><br>redmineのソースをシンボリックリンクで/var/www/redmine配下に作成します。<br><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/redmine /var/www/redmine</span><br></pre></td></tr></table></figure></p><p>redmine用の設定ファイルを作成し、passengerのパラメータやDocumentRootの設定を行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apache2/sites-available/redmine</span><br></pre></td></tr></table></figure><figure class="highlight apache"><figcaption><span>/etc/apache2/sites-available/redmine</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PassengerMaxPoolSize</span> 5</span><br><span class="line"><span class="attribute">PassengerMaxInstancesPerApp</span> 2</span><br><span class="line"><span class="attribute">PassengerPoolIdleTime</span> 3600</span><br><span class="line"><span class="attribute">PassengerHighPerformance</span> <span class="literal">off</span></span><br><span class="line"><span class="attribute">PassengerStatThrottleRate</span> 2</span><br><span class="line"><span class="attribute">RailsSpawnMethod</span> smart</span><br><span class="line"><span class="attribute">RailsAppSpawnerIdleTime</span> 86400</span><br><span class="line"><span class="attribute">RailsFrameworkSpawnerIdleTime</span> 0</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line">        <span class="attribute">ServerAdmin</span> webmaster@localhost</span><br><span class="line"></span><br><span class="line">        <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www</span><br><span class="line"></span><br><span class="line">        <span class="section">&lt;Directory /usr/local/redmine/public&gt;</span></span><br><span class="line">                <span class="attribute"><span class="nomarkup">Options</span></span> FollowSymLinks MultiViews</span><br><span class="line">                <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</span><br><span class="line">                <span class="attribute"><span class="nomarkup">allow</span></span> from <span class="literal">all</span></span><br><span class="line">        <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">Alias</span> /redmine /usr/local/redmine/public/</span><br><span class="line"></span><br><span class="line">        <span class="section">&lt;Location /redmine&gt;</span></span><br><span class="line">          <span class="attribute">RailsBaseURI</span> /redmine</span><br><span class="line">          <span class="attribute">PassengerAppRoot</span> /usr/local/redmine</span><br><span class="line">        <span class="section">&lt;/Location&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">ErrorLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class="line">        <span class="attribute">CustomLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><p>redmineの設定ファイルを有効にし、<br><br>apacheを再起動します。<br><br>（passengerのモジュールを有効にするため、再起動する必要あり）<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo a2ensite redmine</span><br><span class="line">sudo a2dissite default</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><h3 id="git用のリポジトリを自動作成"><a href="#git用のリポジトリを自動作成" class="headerlink" title="git用のリポジトリを自動作成"></a>git用のリポジトリを自動作成</h3><p>プロジェクトを作成後、自動でリポジトリが作成されるように設定します。<br>redmineのリポジトリ内にreposman.rbというファイルがあるので、<br>そのファイルをgit用に編集します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/<span class="built_in">local</span>/redmine/extra/svn/reposman.rb /etc/cron.d/reposman_git.rb</span><br></pre></td></tr></table></figure><figure class="highlight diff"><figcaption><span>編集後のdiff</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt; require 'rubygems'</span><br><span class="line">13,17c12,16</span><br><span class="line">&lt; $redmine_host = ''</span><br><span class="line">&lt; $repos_base   = ''</span><br><span class="line">&lt; $svn_owner    = 'root'</span><br><span class="line">&lt; $svn_group    = 'root'</span><br><span class="line">&lt; $use_groupid  = true</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt; $redmine_host = 'http://localhost/redmine'</span><br><span class="line">&gt; $repos_base   = '/path/too/git/repos'</span><br><span class="line">&gt; $svn_owner    = 'user'</span><br><span class="line">&gt; $svn_group    = 'group'</span><br><span class="line">&gt; $use_groupid  = false</span><br><span class="line">21c20</span><br><span class="line">&lt; $scm          = 'Subversion'</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt; $scm          = 'Git'</span><br><span class="line">45a45</span><br><span class="line">&gt;         system_or_raise "git config --file config http.receivepack true"</span><br><span class="line">286a287,296</span><br><span class="line">&gt;</span><br><span class="line">&gt;     if $scm == 'Git'</span><br><span class="line">&gt;       begin</span><br><span class="line">&gt;        project.post(:repository, :vendor =&gt; $scm, :repository =&gt; &#123;:url =&gt; "#&#123;repos_path&#125;"&#125;, :key =&gt; $api_key)</span><br><span class="line">&gt;         log("\trepository #&#123;repos_path&#125; registered in Redmine with url #&#123;repos_path&#125;");</span><br><span class="line">&gt;       rescue =&gt; e</span><br><span class="line">&gt;         log("\trepository #&#123;repos_path&#125; not registered in Redmine: #&#123;e.message&#125;");</span><br><span class="line">&gt;       end</span><br><span class="line">&gt;     end</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>ブラウザでRedmineにアクセスし、管理メニューから設定を開き、リポジトリのタブを開きます。<br><br>APIキーという項目があるので、テキストボックスのテキストをコピーします。<br></p><img src="/blog/images/2013-01-03_redmine.png"><p>cron の設定を変更します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo crontab -e</span><br></pre></td></tr></table></figure><p>cronで、定期的にバッチを実行するようにします。<br>下記のAPI_KEYの部分にブラウザでコピーした文字列を設定します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * /usr/<span class="built_in">local</span>/bin/ruby /etc/cron.d/reposman_git.rb --key=API_KEY</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近、Redmine2.1をインストールする際に行った手順のメモです。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;構成は以下の通りです。&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu12.04 64bit(Server Edition)&lt;/li&gt;
&lt;li&gt;Ruby1.9.3-p327&lt;/li&gt;
&lt;li&gt;apache + passenger&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="redmine" scheme="http://blog.ogatomo.com/categories/redmine/"/>
    
    
  </entry>
  
  <entry>
    <title>markdown-modeを入れてみた</title>
    <link href="http://blog.ogatomo.com/blog/2013/01/02/markdown-mode-was-used/"/>
    <id>http://blog.ogatomo.com/blog/2013/01/02/markdown-mode-was-used/</id>
    <published>2013-01-02T02:41:00.000Z</published>
    <updated>2018-05-10T01:34:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Octopressの記事作成用に、Emacsにmarkdown-modeを入れてみました。</p><a id="more"></a><h3 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h3><p>いつもの場所にcdして、submodule addします。<br><br>（.emacs.dはgithubでソース管理してます）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.emacs.d</span><br><span class="line">git submodule add git://jblevins.org/git/markdown-mode.git markdown-mode</span><br></pre></td></tr></table></figure><p>~/.emacs.d/init.elを下記の様な具合に編集します。<br><figure class="highlight plain"><figcaption><span>~/.emacs.d/init.el</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;; markdown-mode</span><br><span class="line">(add-to-list &apos;load-path &quot;~/.emacs.d/markdown-mode&quot;)</span><br><span class="line">(autoload &apos;markdown-mode &quot;markdown-mode.el&quot; &quot;Major mode for editing Markdown files&quot; t)</span><br><span class="line">(add-to-list &apos;auto-mode-alist &apos;(&quot;\\.markdown$&quot; . markdown-mode))</span><br><span class="line">(add-to-list &apos;auto-mode-alist &apos;(&quot;\\.md$&quot; . markdown-mode))</span><br></pre></td></tr></table></figure></p><p>一部機能でmarkdownコマンドを使用するようなので、markdownコマンドを使えるようにします。<br><figure class="highlight sh"><figcaption><span>HomeBrewの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install markdown</span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><figcaption><span>MacPortsの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo port install multimarkdown</span><br><span class="line"><span class="comment"># markdownコマンドが無いと言われてしまうので、シンボリックリンクを貼る。</span></span><br><span class="line"><span class="comment"># ヘルプを見ると、markdown-commandを変更すればいいみたいな事が書いてあったけど試してない。</span></span><br><span class="line">sudo ln -s /opt/<span class="built_in">local</span>/bin/multimarkdown /opt/<span class="built_in">local</span>/bin/markdown</span><br></pre></td></tr></table></figure><h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><p>markdown-mode.elのヘルプを読みつつ、どんなキーバインドがあるか調べてみました。<br></p><table><thead><tr><th style="text-align:left">キーバインド</th><th style="text-align:left">機能</th></tr></thead><tbody><tr><td style="text-align:left">C-c C-a l</td><td style="text-align:left">リンクの書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-a r</td><td style="text-align:left">リンクの書式を対話形式で挿入します。</td></tr><tr><td style="text-align:left">C-c C-a w</td><td style="text-align:left">Wikiのリンクの書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-c m</td><td style="text-align:left">編集中のバッファをmarkdownコマンドでHTMLに変換し、別のバッファでHTMLを表示します。</td></tr><tr><td style="text-align:left">C-c C-c e</td><td style="text-align:left">編集中のバッファをmarkdownコマンドでHTMLに変換し、ファイルに保存します。</td></tr><tr><td style="text-align:left">C-c C-c v</td><td style="text-align:left">編集中のバッファをmarkdownコマンドでHTMLに変換し、ファイルに保存し、ブラウザで表示します。</td></tr><tr><td style="text-align:left">C-c C-i i</td><td style="text-align:left">画像の書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-p b</td><td style="text-align:left"><strong>太字</strong>の書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-p f</td><td style="text-align:left"><code>インライン</code>の書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-p i</td><td style="text-align:left"><em>イタリック</em>の書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-s b</td><td style="text-align:left">引用文の書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-s c</td><td style="text-align:left">コード用の書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-s e</td><td style="text-align:left"><em>イタリック</em>の書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-s s</td><td style="text-align:left"><strong>太字</strong>の書式を挿入します。</td></tr><tr><td style="text-align:left">C-c C-t s</td><td style="text-align:left">区切り線を挿入します。</td></tr><tr><td style="text-align:left">C-c C-f n</td><td style="text-align:left">脚注(footnote)を挿入します。</td></tr><tr><td style="text-align:left">C-c C-f g</td><td style="text-align:left">脚注にカーソルがある状態で、脚注の本文にカーソルを移動します。</td></tr><tr><td style="text-align:left">C-c C-f b</td><td style="text-align:left">脚注の本文にカーソルがある状態で、脚注にカーソルを移動します。</td></tr><tr><td style="text-align:left">C-c C-f b</td><td style="text-align:left">脚注の本文にカーソルがある状態で、脚注にカーソルを移動します。</td></tr><tr><td style="text-align:left">C-c -</td><td style="text-align:left">区切り線を挿入します。</td></tr><tr><td style="text-align:left">M-p</td><td style="text-align:left">前のWikiのリンクにカーソルを移動します</td></tr><tr><td style="text-align:left">M-n</td><td style="text-align:left">次のWikiのリンクにカーソルを移動します</td></tr><tr><td style="text-align:left">C-M-p</td><td style="text-align:left">前の見出しにカーソルを移動します（といいつつ#がある位置に移動している気がする）</td></tr><tr><td style="text-align:left">C-M-n</td><td style="text-align:left">次の見出しにカーソルを移動します</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Octopressの記事作成用に、Emacsにmarkdown-modeを入れてみました。&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://blog.ogatomo.com/categories/emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>vagrantでsshがタイムアウトする時の対策</title>
    <link href="http://blog.ogatomo.com/blog/2012/11/16/a-measure-in-case-ssh-times-out-in-vagrant/"/>
    <id>http://blog.ogatomo.com/blog/2012/11/16/a-measure-in-case-ssh-times-out-in-vagrant/</id>
    <published>2012-11-16T00:53:00.000Z</published>
    <updated>2014-01-25T10:59:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>vagrantとveeweeを使ってCentOSをインストールしてたら、vagrantのssh接続がタイムアウトしてインストールが完了しないことがある。<br><br>netboot系のisoファイル使うとよくこの問題がおきてしまうので、<br><br>対策を忘れないうちにメモ。<br></p><a id="more"></a><p>まずは、適当なディレクトリにcdして、Centos5.5のbaseboxを定義する。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd vagrant_test</span><br><span class="line">vagrant init</span><br><span class="line">vagrant basebox define &apos;centos5_5&apos; &quot;CentOS-5.5-x86_64-netboot&quot;</span><br></pre></td></tr></table></figure></p><p>次に、sshのタイムアウト時間を伸ばします。(:ssh_login_timeoutを二桁くらい増やす)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi definitions/centos5_5/definition.rb</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><figcaption><span>definitions/centos5_5/definition.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:ssh_login_timeout</span> =&gt; <span class="string">"60000"</span></span><br></pre></td></tr></table></figure><p>baseboxをビルドします。<br><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant basebox build <span class="string">'centos5_5'</span></span><br></pre></td></tr></table></figure></p><p> これでタイムアウトせずにbaseboxのインストールが完了する・・・はず。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vagrantとveeweeを使ってCentOSをインストールしてたら、vagrantのssh接続がタイムアウトしてインストールが完了しないことがある。&lt;br&gt;&lt;br&gt;netboot系のisoファイル使うとよくこの問題がおきてしまうので、&lt;br&gt;&lt;br&gt;対策を忘れないうちにメモ。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vagrant" scheme="http://blog.ogatomo.com/categories/vagrant/"/>
    
    
  </entry>
  
  <entry>
    <title>CocoaPodsを使ってみた</title>
    <link href="http://blog.ogatomo.com/blog/2012/11/09/cocoapods-was-used/"/>
    <id>http://blog.ogatomo.com/blog/2012/11/09/cocoapods-was-used/</id>
    <published>2012-11-09T13:47:00.000Z</published>
    <updated>2018-05-10T01:34:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOSとかOSXアプリ作るのに、RubyGemsみたいなパッケージ監理ツールあれば便利だなーと思い、CocoaPodsというものをインストールしてみました。<br></p><a id="more"></a><p>Rubyがインストールされている環境でTerminal.appを立ち上げて以下のコマンドでインストールしました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install cocoapods</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>おもむろにXcodeを立ち上げ、適当にiOSプロジェクトを作ります。<br><br>(プロジェクト名はpods_testとでもしておきます。）<br><br><br></p><p>次に、プロジェクトで使うライブラリをインストールします。<br><br>プロジェクトディレクトリに移動し、Podfileを作成します。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd pods_test</span><br><span class="line">vi Podfile</span><br></pre></td></tr></table></figure></p><p>以下の内容のファイルを作成します。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">platform :ios</span><br><span class="line">pod &apos;JSONKit&apos;,       &apos;~&gt; 1.4&apos;</span><br><span class="line">pod &apos;cocos2d&apos;,       &apos;~&gt; 2.0.0&apos;</span><br></pre></td></tr></table></figure></p><p>以下のコマンドを実行します。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure></p><p>インストールし終わると、pods_test.xcworkspace というファイルが出来ているのでxcodeで開くと、Podsプロジェクトとpods_testプロジェクトが追加されたワークスペースが開き、ライブラリが使えるようになっている。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOSとかOSXアプリ作るのに、RubyGemsみたいなパッケージ監理ツールあれば便利だなーと思い、CocoaPodsというものをインストールしてみました。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cocoapods" scheme="http://blog.ogatomo.com/categories/cocoapods/"/>
    
    
  </entry>
  
  <entry>
    <title>ruby-debugインストール用メモ</title>
    <link href="http://blog.ogatomo.com/blog/2012/05/21/the-memo-for-ruby-debug-installation/"/>
    <id>http://blog.ogatomo.com/blog/2012/05/21/the-memo-for-ruby-debug-installation/</id>
    <published>2012-05-20T20:57:00.000Z</published>
    <updated>2018-05-10T01:37:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>ruby-debugをインストールする際、RVMのインストールからやり直したので、<br><br>その時のメモ。<br></p><a id="more"></a><h3 id="RVMの再インストール"><a href="#RVMの再インストール" class="headerlink" title="RVMの再インストール"></a>RVMの再インストール</h3><p>既存のRVMを削除する。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm implode</span><br></pre></td></tr></table></figure></p><p>RVMをインストールする。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L get.rvm.io | bash -s stable</span><br><span class="line">source ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure></p><h3 id="Rubyのインストール"><a href="#Rubyのインストール" class="headerlink" title="Rubyのインストール"></a>Rubyのインストール</h3><p>Rubyに必要そうなパッケージをインストールする。<br><br>Rubyのコンパイル前にこれやってないとハマる事が多い気がする。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rvm pkg install openssl; \</span><br><span class="line">rvm pkg install readline;\</span><br><span class="line">rvm pkg install iconv;\</span><br><span class="line">rvm pkg install curl;\</span><br><span class="line">rvm pkg install zlib;\</span><br><span class="line">rvm pkg install autoconf;\</span><br><span class="line">rvm pkg install pkgconfig;\</span><br><span class="line">rvm pkg install libxml2;\</span><br><span class="line">rvm pkg install libxslt</span><br></pre></td></tr></table></figure><p>Rubyをインストール。今回は、1.9.3-p125をインストールした。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install 1.9.3-p125</span><br></pre></td></tr></table></figure><p>インストール後、ruby-1.9.3-p125が選択されてるか確認する。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list</span><br></pre></td></tr></table></figure></p><p>出力内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rvm rubies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=* ruby-1.9.3-p125 [ x86_64 ]</span><br><span class="line"></span><br><span class="line"># =&gt; - current</span><br><span class="line"># =* - current &amp;&amp; default</span><br><span class="line">#  * - default</span><br></pre></td></tr></table></figure></p><p>別のRubyが選択されている場合は、以下のコマンドを実行する。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 1.9.3-p125 --default</span><br></pre></td></tr></table></figure></p><h3 id="ruby-debugのインストール"><a href="#ruby-debugのインストール" class="headerlink" title="ruby-debugのインストール"></a>ruby-debugのインストール</h3><p>gemでruby-debug19をインストールする。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install ruby-debug19</span><br></pre></td></tr></table></figure><p>動作確認用にrailsアプリケーションを作成し、ステップ実行したいソースコードの位置にdebuggerと記述する。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gem install rails</span><br><span class="line">rails generate test</span><br><span class="line">cd test</span><br><span class="line">bundle install</span><br><span class="line">rails s -u</span><br></pre></td></tr></table></figure></p><p>ruby-debugがうまく動いていれば、debuggerを記述した位置で処理が止まってくれます。<br><br>そのあとは１行づつステップ実行したり、変数の中身みたり出来るようです。<br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ruby-debugをインストールする際、RVMのインストールからやり直したので、&lt;br&gt;&lt;br&gt;その時のメモ。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ruby" scheme="http://blog.ogatomo.com/categories/ruby/"/>
    
    
  </entry>
  
  <entry>
    <title>Redmine.pm設定メモ</title>
    <link href="http://blog.ogatomo.com/blog/2012/05/17/redmine-pm-setting-memo/"/>
    <id>http://blog.ogatomo.com/blog/2012/05/17/redmine-pm-setting-memo/</id>
    <published>2012-05-17T12:57:00.000Z</published>
    <updated>2018-05-10T01:33:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>RedmineのアカウントでSubversionのBasic認証を行う設定のメモ<br><br>CentOS6.2(64ビット版)と、Redmine1.2.0で検証。<br></p><a id="more"></a><h3 id="SELinuxの設定変更"><a href="#SELinuxの設定変更" class="headerlink" title="SELinuxの設定変更"></a>SELinuxの設定変更</h3><p>enforcingになってたらpermissiveに変更。<br><br>(enforcingのままだとapacheからmysqlに接続できない）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getenforce</span><br></pre></td></tr></table></figure><p>を実行後<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enforcing</span><br></pre></td></tr></table></figure></p><p>と出力される場合、<br>Permissiveを設定する。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce Permissive</span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure></p><p>を実行後<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permissive</span><br></pre></td></tr></table></figure></p><p>と表示されるようにする<br></p><p>さらに、次回からPermissiveになるように、設定ファイルを変更する<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># SELINUX=enforcing</span><br><span class="line">SELINUX=permissive</span><br></pre></td></tr></table></figure><h3 id="Redmine-pmをインストール"><a href="#Redmine-pmをインストール" class="headerlink" title="Redmine.pmをインストール"></a>Redmine.pmをインストール</h3><p>次に、SubversionとRedmineの連携部分を設定していきます。<br></p><p>SubversionとApache用SVNモジュールをインストールします。<br><br>(mod_dav_svnをインストールすることで、apacheもインストールされます）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install subversion mod_dav_svn</span><br></pre></td></tr></table></figure><p>Redmine.pmを動かすために必要なperlモジュールをダウンロードします。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mod_perl perl-Digest-SHA1 perl-DBI perl-DBD-mysql</span><br></pre></td></tr></table></figure></p><p>RedmineでLDAP認証を使っている場合はperl-LDAPと、cpanでAuthen::Simple::LDAPをインストールします。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-LDAP</span><br><span class="line">yum install gcc gcc-c++ make</span><br><span class="line">yum install zlib-devel curl-devel openssl-devel httpd-devel apr-devel apr-util-devel httpd-devel mod_perl-devel</span><br><span class="line">yum install perl-CPAN</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cpan</span><br><span class="line">cpan&gt; install Authen::Simple::LDAP</span><br></pre></td></tr></table></figure><p>Redmineのリポジトリから、<br><br>RedmineとSVNを連携させるためのモジュールをダウンロードします。<br><br>ダウンロードしたモジュールはapache用のperlモジュール用ディレクトリ配下に置きます。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br><span class="line">wget http://redmine.rubyforge.org/svn/trunk/extra/svn/Redmine.pm</span><br></pre></td></tr></table></figure><p>ディレクトリを作成し、モジュールをコピー<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/lib64/perl5/Apache</span><br><span class="line">mkdir /usr/lib64/perl5/Apache/Authn</span><br><span class="line">mv Redmine.pm /usr/lib64/perl5/Apache/Authn/.</span><br></pre></td></tr></table></figure></p><p>Redmine.pmを使用した認証の設定と、Subversionの設定を作成<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/httpd/conf.d/redmine_svn.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PerlLoadModule Apache::Authn::Redmine</span><br><span class="line">PerlLoadModule Authen::Simple::LDAP # LDAP認証を使用していない場合は不要</span><br><span class="line">&lt;Location /svn&gt;</span><br><span class="line">     DAV svn</span><br><span class="line">     SVNParentPath &quot;/var/www/svn&quot;</span><br><span class="line"></span><br><span class="line">     AuthType Basic</span><br><span class="line">     AuthName Subversion</span><br><span class="line">     Require valid-user</span><br><span class="line"></span><br><span class="line">     PerlAccessHandler Apache::Authn::Redmine::access_handler</span><br><span class="line">     PerlAuthenHandler Apache::Authn::Redmine::authen_handler</span><br><span class="line"></span><br><span class="line">     # RedmineのDBの接続情報</span><br><span class="line">     RedmineDSN &quot;DBI:mysql:database=redmine_db;host=192.168.1.xxx&quot;</span><br><span class="line"></span><br><span class="line">     RedmineDbUser &quot;redmine_read&quot; # RedmineのDBのユーザー</span><br><span class="line">     RedmineDbPass &quot;password&quot;     # RedmineのDBのパスワード</span><br><span class="line">     RedmineCacheCredsMax 50</span><br><span class="line">&lt;/Location&gt;</span><br></pre></td></tr></table></figure><p>Subversion用ディレクトリを作成します<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/svn</span><br><span class="line">chown -R apache:apache /var/www/svn</span><br></pre></td></tr></table></figure></p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>テスト用のリポジトリを作成します。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnadmin create /var/www/svn/test</span><br></pre></td></tr></table></figure></p><p>プロジェクトを作成し、プロジェクトの識別子はリポジトリと同じく<br><br>test<br><br>とします。</p><p>プロジェクトにメンバーを追加し、<br><br><a href="http://SubversionのIP(もしくはホスト名)/svn/test" target="_blank" rel="noopener">http://SubversionのIP(もしくはホスト名)/svn/test</a><br><br>にアクセスし、Basic認証のプロンプトにRedmineのID・パスワードで認証が成功するか確認します。<br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RedmineのアカウントでSubversionのBasic認証を行う設定のメモ&lt;br&gt;&lt;br&gt;CentOS6.2(64ビット版)と、Redmine1.2.0で検証。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redmine" scheme="http://blog.ogatomo.com/categories/redmine/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu12.04(64bit)にnginxとjenkinsを入れてみた</title>
    <link href="http://blog.ogatomo.com/blog/2012/05/16/how-to-install-nginx-and-jenkins-in-ubuntu12-04-64bit/"/>
    <id>http://blog.ogatomo.com/blog/2012/05/16/how-to-install-nginx-and-jenkins-in-ubuntu12-04-64bit/</id>
    <published>2012-05-16T14:36:00.000Z</published>
    <updated>2018-05-10T01:33:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu12.04 LTS(64bit)に、nginxとjenkinsをインストールしてみました。<br><br>apt-getで、oracle-java7-installerがうまくダウンロード出来ない様だったので<br><br>OpenJDKでjenkinsを動かしてます。</p><a id="more"></a><h3 id="jenkinsのインストール"><a href="#jenkinsのインストール" class="headerlink" title="jenkinsのインストール"></a>jenkinsのインストール</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure><p>JENKINS_ARGSに、–prefix=/jenkinsを追加する<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/default/jenkins</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_ARGS=&quot;--webroot=$JENKINS_RUN/war --httpPort=$HTTP_PORT --ajp13Port=$AJP_PORT --preferredClassLoader=java.net.URLClassLoader --prefix=/jenkins&quot;</span><br></pre></td></tr></table></figure><h3 id="nginxインストール"><a href="#nginxインストール" class="headerlink" title="nginxインストール"></a>nginxインストール</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>nginxのjenkins用の設定ファイル作成( http://ホスト名/jenkins でjenkinsを公開 )<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/nginx/conf.d/jenkins.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location /jenkins &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080/jenkins;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jenkinsとnginxを再起動<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service jenkins restart</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure></p><p> http://ホスト名/jenkins<br>にアクセスし、jenkinsの起動を確認します。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu12.04 LTS(64bit)に、nginxとjenkinsをインストールしてみました。&lt;br&gt;&lt;br&gt;apt-getで、oracle-java7-installerがうまくダウンロード出来ない様だったので&lt;br&gt;&lt;br&gt;OpenJDKでjenkinsを動かしてます。&lt;/p&gt;
    
    </summary>
    
      <category term="jenkins" scheme="http://blog.ogatomo.com/categories/jenkins/"/>
    
    
  </entry>
  
  <entry>
    <title>パスワード管理ツールMortimerのインストール方法</title>
    <link href="http://blog.ogatomo.com/blog/2012/01/08/the-installation-of-mortimer-of-a-password-management-tool/"/>
    <id>http://blog.ogatomo.com/blog/2012/01/08/the-installation-of-mortimer-of-a-password-management-tool/</id>
    <published>2012-01-08T08:22:00.000Z</published>
    <updated>2018-05-10T01:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ruby on Rails製のパスワード管理ツール「Mortimer」を<br><br>CentOS6.2にインストールしてみました。<br></p><p>ローカルのサーバーに構築が行えるので、<br><br>パスワードをチームで共有したい時などに便利です。<br><br><br></p><a id="more"></a><h3 id="CentOS6-2環境の準備"><a href="#CentOS6-2環境の準備" class="headerlink" title="CentOS6.2環境の準備"></a>CentOS6.2環境の準備</h3><p>今回は、以下のURLからCentOS-6.2-x86_64-minimal.isoをダウンロードし、<br>CentOS6.2環境を構築しました。<br><br><a href="http://centos.arcticnetwork.ca/6.2/isos/x86_64/" target="_blank" rel="noopener">http://centos.arcticnetwork.ca/6.2/isos/x86_64/</a><br></p><p>インストール後は、とりあえずSELinuxをpermissiveにしておきます。<br><br>この設定を行わないと、後述するPassengerがうまく動いてくれません。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/selinux</span><br></pre></td></tr></table></figure><p>編集後の/etc/sysconfig/selinuxは↓の様になりました。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line"># SELINUX=enforcing</span><br><span class="line">SELINUX=permissive</span><br><span class="line"># SELINUXTYPE= can take one of these two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure></p><h3 id="apacheのインストール"><a href="#apacheのインストール" class="headerlink" title="apacheのインストール"></a>apacheのインストール</h3><p>apacheをインストールします。<br>(ついでに自動起動の設定もします）<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd</span><br><span class="line">chkconfig httpd on</span><br></pre></td></tr></table></figure><p>Mortimerはhttps以外ではアクセスできないようになっています。<br><br>httpsが使えるように、mod_sslもインストールします。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mod_ssl</span><br></pre></td></tr></table></figure><p>iptablesコマンドで、https用のポートを開けます。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT 5 -m state --state NEW -p tcp --dport 443 -j ACCEPT</span><br></pre></td></tr></table></figure><p>ポートが開いているか確認します。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L --line-numbers</span><br></pre></td></tr></table></figure><p>Chain INPUTにhttpsのポートが追加されているのを確認します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    ACCEPT     all  --  anywhere             anywhere            state RELATED,ESTABLISHED</span><br><span class="line">2    ACCEPT     icmp --  anywhere             anywhere            </span><br><span class="line">3    ACCEPT     all  --  anywhere             anywhere            </span><br><span class="line">4    ACCEPT     tcp  --  anywhere             anywhere            state NEW tcp dpt:ssh</span><br><span class="line">&lt;span style=&quot;color:red&quot;&gt;5    ACCEPT     tcp  --  anywhere             anywhere            state NEW tcp dpt:https&lt;/span&gt;</span><br><span class="line">6    REJECT     all  --  anywhere             anywhere            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    REJECT     all  --  anywhere             anywhere            reject-with icmp-host-prohibited</span><br></pre></td></tr></table></figure><p>ポートの設定を保存します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure><h3 id="Passengerのインストール"><a href="#Passengerのインストール" class="headerlink" title="Passengerのインストール"></a>Passengerのインストール</h3><p>passengerのインストールに必要なパッケージをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ruby ruby-devel rubygems</span><br><span class="line">gem install rails -v=2.3.2</span><br></pre></td></tr></table></figure><p>passengerのコンパイルに必要なパッケージをインストールし、<br><br>passengerをインストールします。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc make</span><br><span class="line">gem install passenger</span><br></pre></td></tr></table></figure><p>passengerのapache用モジュールのコンパイルに必要なパッケージをインストールし、<br><br>passengerのapache用モジュールをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc-c++ httpd-devel openssl-devel readline-devel zlib-devel curl-devel</span><br><span class="line">passenger-install-apache2-module -a</span><br></pre></td></tr></table></figure><h3 id="Mortimerのインストール"><a href="#Mortimerのインストール" class="headerlink" title="Mortimerのインストール"></a>Mortimerのインストール</h3><p>Mortimerのソースコードはgithub上に公開されているので、<br><br>まずはCentOS6.2にgitをインストールします。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p>Mortimer用のディレクトリを作成し、gitコマンドでMortimerのソースコードをコピーします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/mortimer</span><br><span class="line"><span class="built_in">cd</span> /var/www/mortimer</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/aiaio/mortimer.git .</span><br></pre></td></tr></table></figure></p><p>passengerのapache用モジュールに必要な設定ファイルを作成します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passenger-install-apache2-module --snippet &gt; /etc/httpd/conf.d/mortimer.conf</span><br></pre></td></tr></table></figure></p><p>作成したファイルに、Mortimer用の設定を追記します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/httpd/conf.d/mortimer.conf</span><br></pre></td></tr></table></figure></p><p>追記後は以下の様になります。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-3.0.11/ext/apache2/mod_passenger.so</span><br><span class="line">PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-3.0.11</span><br><span class="line">PassengerRuby /usr/bin/ruby</span><br><span class="line"></span><br><span class="line">PassengerAppRoot /var/www/mortimer</span><br><span class="line">PassengerMaxPoolSize 20</span><br><span class="line">PassengerMaxInstancesPerApp 4</span><br><span class="line">PassengerPoolIdleTime 3600</span><br><span class="line">PassengerUseGlobalQueue on</span><br><span class="line">PassengerHighPerformance on</span><br><span class="line">PassengerStatThrottleRate 10</span><br><span class="line">RailsSpawnMethod smart</span><br><span class="line">RailsAppSpawnerIdleTime 86400</span><br><span class="line">RailsFrameworkSpawnerIdleTime 0</span><br><span class="line">RailsBaseURI /</span><br></pre></td></tr></table></figure></p><p>apacheのDocumentRootを変更し、Mortimerのpublicディレクトリのパスを設定します。<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure><p>以下の様に編集します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DocumentRoot <span class="string">"/var/www/html"</span></span><br><span class="line">DocumentRoot <span class="string">"/var/www/mortimer/public"</span></span><br></pre></td></tr></table></figure></p><h3 id="Mortimerの初期設定"><a href="#Mortimerの初期設定" class="headerlink" title="Mortimerの初期設定"></a>Mortimerの初期設定</h3><p>最後に、Mortimerの管理者アカウントの登録や、<br>データベースの暗号化キーの設定などの初期設定を行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake auth:ten:site_key</span><br></pre></td></tr></table></figure><p>データベースの設定ファイルを作成します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/www/mortimer/config/database.yml</span><br></pre></td></tr></table></figure></p><p>以下の様に記述します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">production:</span><br><span class="line">  adapter: sqlite3</span><br><span class="line">  database: db/mortimer.sqlite3</span><br><span class="line">  pool: 5</span><br></pre></td></tr></table></figure></p><p>sqliteを使うためのライブラリをインストールします。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install sqlite-devel</span><br><span class="line">gem install sqlite3-ruby</span><br></pre></td></tr></table></figure></p><p>データベースの作成を行います。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake db:migrate RAILS_ENV=production</span><br></pre></td></tr></table></figure></p><p>管理者アカウント登録等を行う為のスクリプトを実行します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake setup RAILS_ENV=production</span><br></pre></td></tr></table></figure></p><p>以下の様に、対話形式でアカウント情報を設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*****mortimer setup for PRODUCTION environment:*****</span><br><span class="line">You are about to create the root accout</span><br><span class="line">along with an initial admin account.</span><br><span class="line">Press any key to continue...</span><br><span class="line"></span><br><span class="line">Email:  </span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line">Now you&apos;ll create the first ADMIN user:</span><br><span class="line">Login:  </span><br><span class="line">First name:  </span><br><span class="line">Last name:  </span><br><span class="line">Email:  </span><br><span class="line">Password:</span><br></pre></td></tr></table></figure></p><p>mortimerの実行時にエラーになってしまうので、/var/www/mortimer/root_key.rsa を/rootディレクトリに移動させます。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /var/www/mortimer/root_key.rsa ~/.</span><br></pre></td></tr></table></figure></p><p>apacheを起動します。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service httpd start</span><br></pre></td></tr></table></figure></p><p>最後にWebブラウザで<br><br>https://サーバーのIP/<br><br>にアクセスして以下のようなログイン画面が表示されればインストール完了です。<br><img src="/blog/images/2012-01-08_mortimer.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ruby on Rails製のパスワード管理ツール「Mortimer」を&lt;br&gt;&lt;br&gt;CentOS6.2にインストールしてみました。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;ローカルのサーバーに構築が行えるので、&lt;br&gt;&lt;br&gt;パスワードをチームで共有したい時などに便利です。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ruby" scheme="http://blog.ogatomo.com/categories/ruby/"/>
    
    
  </entry>
  
</feed>
